{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\n// import WebSocketClient from '../../utils/WebSocketClient';\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n  try {\n    const response = await axios.get('https://d5bf569728f0.ngrok.app/odsay/set-csrf-token/', {\n      withCredentials: true\n    });\n    console.log('MapView.js >> CSRF token received:', response.data);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('MapView.js >> Error fetching CSRF token:', error);\n    throw error; // 에러 발생 시 throw로 전달\n  }\n};\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n  baseURL: 'https://d5bf569728f0.ngrok.app',\n  // ngrok 도메인 설정\n  withCredentials: true // 자격 증명 포함\n});\naxiosInstance.interceptors.request.use(async config => {\n  try {\n    const token = await getCsrfToken();\n    config.headers['X-CSRFToken'] = token;\n    console.log('MapView.js >> CSRF token set in request headers:', token);\n    return config;\n  } catch (error) {\n    console.error('MapView.js >> Failed to set CSRF token in request headers:', error);\n    return Promise.reject(error); // 에러 발생 시 요청 중단\n  }\n});\n\n// 지하철 노선 색상 매핑 객체\nconst subwayLineColors = {\n  1: '#133499',\n  2: '#36B12A',\n  3: '#F55F2C',\n  4: '#1C97DB',\n  5: '#893CB6',\n  6: '#9A4F10',\n  7: '#5F6D00',\n  8: '#E71F6E',\n  9: '#BF9F1D',\n  21: '#6691C9',\n  22: '#ED8000',\n  101: '#0095D4',\n  102: '#F78D46',\n  104: '#7DC4A5',\n  107: '#9AD296',\n  108: '#26A97F',\n  109: '#A8022D',\n  110: '#FF8E00',\n  112: '#003499',\n  113: '#B6C15D',\n  114: '#80A62C',\n  115: '#AD8602',\n  116: '#EDB217',\n  117: '#6789CA',\n  31: '#36B42D',\n  41: '#FA5F2D',\n  42: '#36B42D',\n  43: '#EDB217',\n  51: '#36B42D',\n  71: '#FA5F2D',\n  72: '#34B12B',\n  73: '#BF9F1D',\n  74: '#6F8CC0',\n  78: '#0054A6',\n  79: '#893CB6',\n  91: '#996883',\n  92: '#2e81e2',\n  93: '#00ad79',\n  94: '#756be9',\n  95: '#ee7a0c',\n  96: '#fcb706'\n};\nexport default {\n  props: {\n    memHome: String,\n    startPoint: String,\n    endPoint: String,\n    memYoungY: Boolean,\n    memYoungN: Boolean,\n    memSubsidiaryYn: Boolean\n  },\n  data() {\n    return {\n      localStartPoint: this.startPoint,\n      localEndPoint: this.endPoint,\n      routes: [],\n      map: null,\n      wsClient: null,\n      polylines: [] // 폴리라인을 저장할 배열\n    };\n  },\n  methods: {\n    async geocode(address) {\n      try {\n        console.log('MapView.js >> Geocoding address:', address);\n        const response = await axiosInstance.get('/odsay/geocode/', {\n          params: {\n            address\n          }\n        });\n        console.log('MapView.js >> Geocode response:', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('MapView.js >> Error geocoding address:', error);\n        if (error.response) {\n          console.error('MapView.js >> Error response data:', error.response.data);\n        }\n        throw error;\n      }\n    },\n    async findRoute() {\n      try {\n        console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n\n        // Geocoding 주소를 통해 좌표를 가져오는 부분 (백엔드에서 처리)\n        const startResponse = await this.geocode(this.localStartPoint); // GET 메서드를 사용하도록 수정\n        console.log('MapView.js >> Start geocode response:', startResponse);\n        const endResponse = await this.geocode(this.localEndPoint); // GET 메서드를 사용하도록 수정\n        console.log('MapView.js >> End geocode response:', endResponse);\n        if (!startResponse || !endResponse) {\n          throw new Error('Failed to get coordinates');\n        }\n\n        // startResponse와 endResponse에서 올바르게 데이터를 추출\n        const sx = startResponse.x;\n        const sy = startResponse.y;\n        const ex = endResponse.x;\n        const ey = endResponse.y;\n        console.log('MapView.js >> Start coordinates:', {\n          sx,\n          sy\n        });\n        console.log('MapView.js >> End coordinates:', {\n          ex,\n          ey\n        });\n\n        // ODSAY API를 통해 경로 찾기 요청\n        const odsasApiUrl = `searchPubTransPathT?SX=${sx}&SY=${sy}&EX=${ex}&EY=${ey}&apiKey=${encodeURIComponent(process.env.VUE_APP_ODSAY_API_KEY)}`;\n        console.log('MapView.js >> ODSAY API request URL:', odsasApiUrl); // 요청 URL을 로그에 출력\n\n        const routeResponse = await this.$odsayAxios.get(odsasApiUrl);\n        console.log('MapView.js >> ODSAY API response:', routeResponse.data);\n        if (routeResponse.data && routeResponse.data.result && routeResponse.data.result.path) {\n          this.routes = routeResponse.data.result.path.map(path => {\n            return {\n              totalTime: path.info.totalTime,\n              totalWalk: path.info.totalWalk,\n              busTransitCount: path.info.busTransitCount,\n              subwayTransitCount: path.info.subwayTransitCount,\n              payment: path.info.payment,\n              totalDistance: path.info.totalDistance,\n              firstStartStation: path.subPath[0].startName,\n              startNameKor: path.subPath[0].startName,\n              endName: path.subPath[path.subPath.length - 1].endName,\n              lastEndStation: path.subPath[path.subPath.length - 1].endName,\n              subPaths: path.subPath,\n              mapObj: path.info.mapObj,\n              // mapObj를 여기서 가져옴\n              sx: sx,\n              // 출발 좌표\n              sy: sy,\n              // 출발 좌표\n              ex: ex,\n              // 도착 좌표\n              ey: ey // 도착 좌표\n            };\n          });\n        } else {\n          console.error('MapView.js >> No valid route found');\n        }\n      } catch (error) {\n        console.error('MapView.js >> Error finding route:', error);\n      }\n    },\n    async handleRouteClick(route) {\n      try {\n        const {\n          mapObj,\n          sx,\n          sy,\n          ex,\n          ey\n        } = route;\n        console.log('MapView.vue >> handleRouteClick >> mapObj:', mapObj);\n        console.log('MapView.vue >> handleRouteClick >> sx, sy, ex, ey:', sx, sy, ex, ey);\n        const odsasApiUrl = `https://api.odsay.com/v1/api/loadLane?mapObject=0:0@${mapObj}&apiKey=${encodeURIComponent(process.env.VUE_APP_ODSAY_API_KEY)}`;\n        console.log('MapView.vue >> ODSAY loadLane API request URL:', odsasApiUrl);\n        const routeResponse = await this.$odsayAxios.get(odsasApiUrl);\n        console.log('MapView.js >> ODSA loadLane API response:', routeResponse.data);\n        this.clearPolylines(); // 기존 폴리라인 삭제\n\n        this.drawNaverMarker(sx, sy);\n        this.drawNaverMarker(ex, ey);\n        this.drawNaverPolyLine(routeResponse.data);\n        if (routeResponse.data.result.boundary) {\n          const boundary = new naver.maps.LatLngBounds(new naver.maps.LatLng(routeResponse.data.result.boundary.top, routeResponse.data.result.boundary.left), new naver.maps.LatLng(routeResponse.data.result.boundary.bottom, routeResponse.data.result.boundary.right));\n          this.map.panToBounds(boundary);\n        }\n      } catch (error) {\n        console.error('MapView.vue >> handleRouteClick >> Error:', error);\n      }\n    },\n    clearPolylines() {\n      this.polylines.forEach(polyline => polyline.setMap(null));\n      this.polylines = [];\n    },\n    initializeMap() {\n      if (window.naver) {\n        var mapOptions = {\n          center: new naver.maps.LatLng(37.5665, 126.9780),\n          zoom: 10\n        };\n        this.map = new naver.maps.Map('map', mapOptions);\n      } else {\n        console.error('MapView.js >> Naver Maps API is not loaded.');\n      }\n    },\n    drawNaverMarker(x, y) {\n      new naver.maps.Marker({\n        position: new naver.maps.LatLng(y, x),\n        map: this.map\n      });\n    },\n    drawNaverPolyLine(data) {\n      let lineArray;\n      for (let i = 0; i < data.result.lane.length; i++) {\n        for (let j = 0; j < data.result.lane[i].section.length; j++) {\n          lineArray = [];\n          for (let k = 0; k < data.result.lane[i].section[j].graphPos.length; k++) {\n            lineArray.push(new naver.maps.LatLng(data.result.lane[i].section[j].graphPos[k].y, data.result.lane[i].section[j].graphPos[k].x));\n          }\n          // 교통수단에 따른 색상 지정\n          let lineColor = '#000'; // 기본 색상은 검정색\n          const trafficType = data.result.lane[i].type; // 교통수단 타입 (1: 지하철, 2: 버스, 3: 도보)\n          if (trafficType === 1) {\n            // 지하철\n            const subwayCode = data.result.lane[i].subwayCode;\n            lineColor = subwayLineColors[subwayCode] || lineColor;\n          } else if (trafficType === 2) {\n            // 버스\n            lineColor = '#C39898';\n          } else if (trafficType === 3) {\n            // 도보\n            lineColor = '#EEEEEE';\n          }\n          const polyline = new naver.maps.Polyline({\n            map: this.map,\n            path: lineArray,\n            strokeWeight: 3,\n            strokeColor: lineColor\n          });\n          this.polylines.push(polyline); // 폴리라인 저장\n        }\n      }\n    },\n    displayRouteOnMap(data) {\n      try {\n        console.log('MapView.js >> Displaying route on map with data:', data);\n        const resultJsonData = data.result;\n        if (resultJsonData) {\n          // 지도에 마커 표시\n          this.drawNaverMarker(data.sx, data.sy);\n          this.drawNaverMarker(data.ex, data.ey);\n          this.drawNaverPolyLine(resultJsonData);\n          if (resultJsonData.result.boundary) {\n            const boundary = new naver.maps.LatLngBounds(new naver.maps.LatLng(resultJsonData.result.boundary.top, resultJsonData.result.boundary.left), new naver.maps.LatLng(resultJsonData.result.boundary.bottom, resultJsonData.result.boundary.right));\n            this.map.panToBounds(boundary);\n          }\n        } else {\n          console.error('MapView.js >> Invalid response data:', resultJsonData);\n        }\n      } catch (error) {\n        console.error('MapView.js >> Error displaying route:', error);\n      }\n    },\n    formatTime(minutes) {\n      const hours = Math.floor(minutes / 60);\n      const mins = minutes % 60;\n      return `${hours}시간 ${mins}분`;\n    },\n    getLineClass(trafficType, subwaycode) {\n      if (trafficType === 1) {\n        return 'bus';\n      } else if (trafficType === 2) {\n        return `sub${subwaycode}`;\n      } else {\n        return 'walk';\n      }\n    },\n    getAction(subPath, startName, lane) {\n      if (subPath.trafficType === 1) {\n        return `지하철 ${lane.map(l => l.name).join(', ')} - ${startName}역`;\n      } else if (subPath.trafficType === 2) {\n        return `버스 ${lane.map(l => l.busNo).join(', ')} 번 - ${startName}`;\n      } else {\n        return `도보 - ${startName}`;\n      }\n    }\n  },\n  async mounted() {\n    // this.wsClient = new WebSocketClient('wss://3a145eca76f9.ngrok.app/ws/route/');\n    // this.wsClient.connect();\n    this.initializeMap();\n    await this.findRoute();\n  },\n  watch: {\n    startPoint(newStartPoint) {\n      this.localStartPoint = newStartPoint;\n    },\n    endPoint(newEndPoint) {\n      this.localEndPoint = newEndPoint;\n    }\n  }\n};","map":{"version":3,"names":["axios","getCsrfToken","response","get","withCredentials","console","log","data","csrfToken","error","axiosInstance","create","baseURL","interceptors","request","use","config","token","headers","Promise","reject","subwayLineColors","props","memHome","String","startPoint","endPoint","memYoungY","Boolean","memYoungN","memSubsidiaryYn","localStartPoint","localEndPoint","routes","map","wsClient","polylines","methods","geocode","address","params","findRoute","startResponse","endResponse","Error","sx","x","sy","y","ex","ey","odsasApiUrl","encodeURIComponent","process","env","VUE_APP_ODSAY_API_KEY","routeResponse","$odsayAxios","result","path","totalTime","info","totalWalk","busTransitCount","subwayTransitCount","payment","totalDistance","firstStartStation","subPath","startName","startNameKor","endName","length","lastEndStation","subPaths","mapObj","handleRouteClick","route","clearPolylines","drawNaverMarker","drawNaverPolyLine","boundary","naver","maps","LatLngBounds","LatLng","top","left","bottom","right","panToBounds","forEach","polyline","setMap","initializeMap","window","mapOptions","center","zoom","Map","Marker","position","lineArray","i","lane","j","section","k","graphPos","push","lineColor","trafficType","type","subwayCode","Polyline","strokeWeight","strokeColor","displayRouteOnMap","resultJsonData","formatTime","minutes","hours","Math","floor","mins","getLineClass","subwaycode","getAction","l","name","join","busNo","mounted","watch","newStartPoint","newEndPoint"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/MapView.js"],"sourcesContent":["import axios from 'axios';\n// import WebSocketClient from '../../utils/WebSocketClient';\n\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n    try {\n        const response = await axios.get('https://d5bf569728f0.ngrok.app/odsay/set-csrf-token/', { withCredentials: true });\n        console.log('MapView.js >> CSRF token received:', response.data);\n        return response.data.csrfToken;\n    } catch (error) {\n        console.error('MapView.js >> Error fetching CSRF token:', error);\n        throw error;  // 에러 발생 시 throw로 전달\n    }\n};\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n    baseURL: 'https://d5bf569728f0.ngrok.app',  // ngrok 도메인 설정\n    withCredentials: true  // 자격 증명 포함\n});\n\naxiosInstance.interceptors.request.use(async (config) => {\n    try {\n        const token = await getCsrfToken();\n        config.headers['X-CSRFToken'] = token;\n        console.log('MapView.js >> CSRF token set in request headers:', token);\n        return config;\n    } catch (error) {\n        console.error('MapView.js >> Failed to set CSRF token in request headers:', error);\n        return Promise.reject(error);  // 에러 발생 시 요청 중단\n    }\n});\n\n// 지하철 노선 색상 매핑 객체\nconst subwayLineColors = {\n    1: '#133499',\n    2: '#36B12A',\n    3: '#F55F2C',\n    4: '#1C97DB',\n    5: '#893CB6',\n    6: '#9A4F10',\n    7: '#5F6D00',\n    8: '#E71F6E',\n    9: '#BF9F1D',\n    21: '#6691C9',\n    22: '#ED8000',\n    101: '#0095D4',\n    102: '#F78D46',\n    104: '#7DC4A5',\n    107: '#9AD296',\n    108: '#26A97F',\n    109: '#A8022D',\n    110: '#FF8E00',\n    112: '#003499',\n    113: '#B6C15D',\n    114: '#80A62C',\n    115: '#AD8602',\n    116: '#EDB217',\n    117: '#6789CA',\n    31: '#36B42D',\n    41: '#FA5F2D',\n    42: '#36B42D',\n    43: '#EDB217',\n    51: '#36B42D',\n    71: '#FA5F2D',\n    72: '#34B12B',\n    73: '#BF9F1D',\n    74: '#6F8CC0',\n    78: '#0054A6',\n    79: '#893CB6',\n    91: '#996883',\n    92: '#2e81e2',\n    93: '#00ad79',\n    94: '#756be9',\n    95: '#ee7a0c',\n    96: '#fcb706'\n};\n\nexport default {\n    props: {\n        memHome: String,\n        startPoint: String,\n        endPoint: String,\n        memYoungY: Boolean,\n        memYoungN: Boolean,\n        memSubsidiaryYn: Boolean\n    },\n    data() {\n        return {\n            localStartPoint: this.startPoint,\n            localEndPoint: this.endPoint,\n            routes: [],\n            map: null,\n            wsClient: null,\n            polylines: []  // 폴리라인을 저장할 배열\n        };\n    },\n    methods: {\n        async geocode(address) {\n            try {\n                console.log('MapView.js >> Geocoding address:', address);\n                const response = await axiosInstance.get('/odsay/geocode/', { params: { address } });\n                console.log('MapView.js >> Geocode response:', response.data);\n                return response.data;\n            } catch (error) {\n                console.error('MapView.js >> Error geocoding address:', error);\n                if (error.response) {\n                    console.error('MapView.js >> Error response data:', error.response.data);\n                }\n                throw error;\n            }\n        },\n        \n        async findRoute() {\n            try {\n                console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n                \n                // Geocoding 주소를 통해 좌표를 가져오는 부분 (백엔드에서 처리)\n                const startResponse = await this.geocode(this.localStartPoint);  // GET 메서드를 사용하도록 수정\n                console.log('MapView.js >> Start geocode response:', startResponse);\n                const endResponse = await this.geocode(this.localEndPoint);  // GET 메서드를 사용하도록 수정\n                console.log('MapView.js >> End geocode response:', endResponse);\n                \n                if (!startResponse || !endResponse) {\n                    throw new Error('Failed to get coordinates');\n                }\n\n                // startResponse와 endResponse에서 올바르게 데이터를 추출\n                const sx = startResponse.x;\n                const sy = startResponse.y;\n                const ex = endResponse.x;\n                const ey = endResponse.y;\n                \n                console.log('MapView.js >> Start coordinates:', { sx, sy });\n                console.log('MapView.js >> End coordinates:', { ex, ey });\n                \n                // ODSAY API를 통해 경로 찾기 요청\n                const odsasApiUrl = `searchPubTransPathT?SX=${sx}&SY=${sy}&EX=${ex}&EY=${ey}&apiKey=${encodeURIComponent(process.env.VUE_APP_ODSAY_API_KEY)}`;\n                console.log('MapView.js >> ODSAY API request URL:', odsasApiUrl); // 요청 URL을 로그에 출력\n                \n                const routeResponse = await this.$odsayAxios.get(odsasApiUrl);\n                console.log('MapView.js >> ODSAY API response:', routeResponse.data);\n\n                if (routeResponse.data && routeResponse.data.result && routeResponse.data.result.path) {\n                    this.routes = routeResponse.data.result.path.map((path) => {\n                        return {\n                            totalTime: path.info.totalTime,\n                            totalWalk: path.info.totalWalk,\n                            busTransitCount: path.info.busTransitCount,\n                            subwayTransitCount: path.info.subwayTransitCount,\n                            payment: path.info.payment,\n                            totalDistance: path.info.totalDistance,\n                            firstStartStation: path.subPath[0].startName,\n                            startNameKor: path.subPath[0].startName,\n                            endName: path.subPath[path.subPath.length - 1].endName,\n                            lastEndStation: path.subPath[path.subPath.length - 1].endName,\n                            subPaths: path.subPath,\n                            mapObj: path.info.mapObj,  // mapObj를 여기서 가져옴\n                            sx: sx,  // 출발 좌표\n                            sy: sy,  // 출발 좌표\n                            ex: ex,  // 도착 좌표\n                            ey: ey   // 도착 좌표\n                        };\n                    });\n                } else {\n                    console.error('MapView.js >> No valid route found');\n                }\n            } catch (error) {\n                console.error('MapView.js >> Error finding route:', error);\n            }\n        },\n\n        async handleRouteClick(route) {\n            try {\n                const { mapObj, sx, sy, ex, ey } = route;\n                console.log('MapView.vue >> handleRouteClick >> mapObj:', mapObj);\n                console.log('MapView.vue >> handleRouteClick >> sx, sy, ex, ey:', sx, sy, ex, ey);\n\n                const odsasApiUrl = `https://api.odsay.com/v1/api/loadLane?mapObject=0:0@${mapObj}&apiKey=${encodeURIComponent(process.env.VUE_APP_ODSAY_API_KEY)}`;\n                console.log('MapView.vue >> ODSAY loadLane API request URL:', odsasApiUrl);\n\n                const routeResponse = await this.$odsayAxios.get(odsasApiUrl);\n                console.log('MapView.js >> ODSA loadLane API response:', routeResponse.data);\n                \n                this.clearPolylines();  // 기존 폴리라인 삭제\n\n                this.drawNaverMarker(sx, sy);\n                this.drawNaverMarker(ex, ey);\n                this.drawNaverPolyLine(routeResponse.data);\n\n                if (routeResponse.data.result.boundary) {\n                    const boundary = new naver.maps.LatLngBounds(\n                        new naver.maps.LatLng(routeResponse.data.result.boundary.top, routeResponse.data.result.boundary.left),\n                        new naver.maps.LatLng(routeResponse.data.result.boundary.bottom, routeResponse.data.result.boundary.right)\n                    );\n                    this.map.panToBounds(boundary);\n                }\n            } catch (error) {\n                console.error('MapView.vue >> handleRouteClick >> Error:', error);\n            }\n        },\n\n        clearPolylines() {\n            this.polylines.forEach(polyline => polyline.setMap(null));\n            this.polylines = [];\n        },\n\n\n        initializeMap() {\n            if (window.naver) {\n                var mapOptions = {\n                    center: new naver.maps.LatLng(37.5665, 126.9780),\n                    zoom: 10\n                };\n                this.map = new naver.maps.Map('map', mapOptions);\n            } else {\n                console.error('MapView.js >> Naver Maps API is not loaded.');\n            }\n        },\n\n        drawNaverMarker(x, y) {\n            new naver.maps.Marker({\n                position: new naver.maps.LatLng(y, x),\n                map: this.map\n            });\n        },\n\n        drawNaverPolyLine(data) {\n            let lineArray;\n            for (let i = 0; i < data.result.lane.length; i++) {\n                for (let j = 0; j < data.result.lane[i].section.length; j++) {\n                    lineArray = [];\n                    for (let k = 0; k < data.result.lane[i].section[j].graphPos.length; k++) {\n                        lineArray.push(new naver.maps.LatLng(data.result.lane[i].section[j].graphPos[k].y, data.result.lane[i].section[j].graphPos[k].x));\n                    }\n                    // 교통수단에 따른 색상 지정\n                    let lineColor = '#000';  // 기본 색상은 검정색\n                    const trafficType = data.result.lane[i].type;  // 교통수단 타입 (1: 지하철, 2: 버스, 3: 도보)\n                    if (trafficType === 1) {\n                        // 지하철\n                        const subwayCode = data.result.lane[i].subwayCode;\n                        lineColor = subwayLineColors[subwayCode] || lineColor;\n                    } else if (trafficType === 2) {\n                        // 버스\n                        lineColor = '#C39898';\n                    } else if (trafficType === 3) {\n                        // 도보\n                        lineColor = '#EEEEEE';\n                    }\n                    const polyline = new naver.maps.Polyline({\n                        map: this.map,\n                        path: lineArray,\n                        strokeWeight: 3,\n                        strokeColor: lineColor\n                    });\n                    this.polylines.push(polyline);  // 폴리라인 저장\n                }\n            }\n        },\n        \n        displayRouteOnMap(data) {\n            try {\n                console.log('MapView.js >> Displaying route on map with data:', data);\n\n                const resultJsonData = data.result;\n                if (resultJsonData) {\n                    // 지도에 마커 표시\n                    this.drawNaverMarker(data.sx, data.sy);\n                    this.drawNaverMarker(data.ex, data.ey);\n                    this.drawNaverPolyLine(resultJsonData);\n\n                    if (resultJsonData.result.boundary) {\n                        const boundary = new naver.maps.LatLngBounds(\n                            new naver.maps.LatLng(resultJsonData.result.boundary.top, resultJsonData.result.boundary.left),\n                            new naver.maps.LatLng(resultJsonData.result.boundary.bottom, resultJsonData.result.boundary.right)\n                        );\n                        this.map.panToBounds(boundary);\n                    }\n                } else {\n                    console.error('MapView.js >> Invalid response data:', resultJsonData);\n                }\n            } catch (error) {\n                console.error('MapView.js >> Error displaying route:', error);\n            }\n        },\n        \n        formatTime(minutes) {\n            const hours = Math.floor(minutes / 60);\n            const mins = minutes % 60;\n            return `${hours}시간 ${mins}분`;\n        },\n\n        getLineClass(trafficType, subwaycode) {\n            if (trafficType === 1) {\n                return 'bus';\n            } else if (trafficType === 2) {\n                return `sub${subwaycode}`;\n            } else {\n                return 'walk';\n            }\n        },\n\n        getAction(subPath, startName, lane) {\n            if (subPath.trafficType === 1) {\n                return `지하철 ${lane.map(l => l.name).join(', ')} - ${startName}역`;\n            } else if (subPath.trafficType === 2) {\n                return `버스 ${lane.map(l => l.busNo).join(', ')} 번 - ${startName}`;\n            } else {\n                return `도보 - ${startName}`;\n            }\n        }\n    },\n    async mounted() {\n        // this.wsClient = new WebSocketClient('wss://3a145eca76f9.ngrok.app/ws/route/');\n        // this.wsClient.connect();\n        this.initializeMap();\n        await this.findRoute();\n    },\n    watch: {\n        startPoint(newStartPoint) {\n            this.localStartPoint = newStartPoint;\n        },\n        endPoint(newEndPoint) {\n            this.localEndPoint = newEndPoint;\n        }\n    }\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAGA;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,sDAAsD,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC;IACnHC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,QAAQ,CAACK,IAAI,CAAC;IAChE,OAAOL,QAAQ,CAACK,IAAI,CAACC,SAAS;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,MAAMA,KAAK,CAAC,CAAE;EAClB;AACJ,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGV,KAAK,CAACW,MAAM,CAAC;EAC/BC,OAAO,EAAE,gCAAgC;EAAG;EAC5CR,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;AAEFM,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACrD,IAAI;IACA,MAAMC,KAAK,GAAG,MAAMhB,YAAY,CAAC,CAAC;IAClCe,MAAM,CAACE,OAAO,CAAC,aAAa,CAAC,GAAGD,KAAK;IACrCZ,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEW,KAAK,CAAC;IACtE,OAAOD,MAAM;EACjB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,4DAA4D,EAAEA,KAAK,CAAC;IAClF,OAAOU,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC,CAAC,CAAE;EACnC;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMY,gBAAgB,GAAG;EACrB,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,CAAC,EAAE,SAAS;EACZ,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,GAAG,EAAE,SAAS;EACd,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE,SAAS;EACb,EAAE,EAAE;AACR,CAAC;AAED,eAAe;EACXC,KAAK,EAAE;IACHC,OAAO,EAAEC,MAAM;IACfC,UAAU,EAAED,MAAM;IAClBE,QAAQ,EAAEF,MAAM;IAChBG,SAAS,EAAEC,OAAO;IAClBC,SAAS,EAAED,OAAO;IAClBE,eAAe,EAAEF;EACrB,CAAC;EACDrB,IAAIA,CAAA,EAAG;IACH,OAAO;MACHwB,eAAe,EAAE,IAAI,CAACN,UAAU;MAChCO,aAAa,EAAE,IAAI,CAACN,QAAQ;MAC5BO,MAAM,EAAE,EAAE;MACVC,GAAG,EAAE,IAAI;MACTC,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,EAAE,CAAE;IACnB,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,OAAOA,CAACC,OAAO,EAAE;MACnB,IAAI;QACAlC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEiC,OAAO,CAAC;QACxD,MAAMrC,QAAQ,GAAG,MAAMQ,aAAa,CAACP,GAAG,CAAC,iBAAiB,EAAE;UAAEqC,MAAM,EAAE;YAAED;UAAQ;QAAE,CAAC,CAAC;QACpFlC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEJ,QAAQ,CAACK,IAAI,CAAC;QAC7D,OAAOL,QAAQ,CAACK,IAAI;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D,IAAIA,KAAK,CAACP,QAAQ,EAAE;UAChBG,OAAO,CAACI,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACP,QAAQ,CAACK,IAAI,CAAC;QAC5E;QACA,MAAME,KAAK;MACf;IACJ,CAAC;IAED,MAAMgC,SAASA,CAAA,EAAG;MACd,IAAI;QACApC,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAE,IAAI,CAACyB,eAAe,EAAE,gBAAgB,EAAE,IAAI,CAACC,aAAa,CAAC;;QAExH;QACA,MAAMU,aAAa,GAAG,MAAM,IAAI,CAACJ,OAAO,CAAC,IAAI,CAACP,eAAe,CAAC,CAAC,CAAE;QACjE1B,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEoC,aAAa,CAAC;QACnE,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACL,OAAO,CAAC,IAAI,CAACN,aAAa,CAAC,CAAC,CAAE;QAC7D3B,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEqC,WAAW,CAAC;QAE/D,IAAI,CAACD,aAAa,IAAI,CAACC,WAAW,EAAE;UAChC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAChD;;QAEA;QACA,MAAMC,EAAE,GAAGH,aAAa,CAACI,CAAC;QAC1B,MAAMC,EAAE,GAAGL,aAAa,CAACM,CAAC;QAC1B,MAAMC,EAAE,GAAGN,WAAW,CAACG,CAAC;QACxB,MAAMI,EAAE,GAAGP,WAAW,CAACK,CAAC;QAExB3C,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE;UAAEuC,EAAE;UAAEE;QAAG,CAAC,CAAC;QAC3D1C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;UAAE2C,EAAE;UAAEC;QAAG,CAAC,CAAC;;QAEzD;QACA,MAAMC,WAAW,GAAG,0BAA0BN,EAAE,OAAOE,EAAE,OAAOE,EAAE,OAAOC,EAAE,WAAWE,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAAC,EAAE;QAC7IlD,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE6C,WAAW,CAAC,CAAC,CAAC;;QAElE,MAAMK,aAAa,GAAG,MAAM,IAAI,CAACC,WAAW,CAACtD,GAAG,CAACgD,WAAW,CAAC;QAC7D9C,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEkD,aAAa,CAACjD,IAAI,CAAC;QAEpE,IAAIiD,aAAa,CAACjD,IAAI,IAAIiD,aAAa,CAACjD,IAAI,CAACmD,MAAM,IAAIF,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACC,IAAI,EAAE;UACnF,IAAI,CAAC1B,MAAM,GAAGuB,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACC,IAAI,CAACzB,GAAG,CAAEyB,IAAI,IAAK;YACvD,OAAO;cACHC,SAAS,EAAED,IAAI,CAACE,IAAI,CAACD,SAAS;cAC9BE,SAAS,EAAEH,IAAI,CAACE,IAAI,CAACC,SAAS;cAC9BC,eAAe,EAAEJ,IAAI,CAACE,IAAI,CAACE,eAAe;cAC1CC,kBAAkB,EAAEL,IAAI,CAACE,IAAI,CAACG,kBAAkB;cAChDC,OAAO,EAAEN,IAAI,CAACE,IAAI,CAACI,OAAO;cAC1BC,aAAa,EAAEP,IAAI,CAACE,IAAI,CAACK,aAAa;cACtCC,iBAAiB,EAAER,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS;cAC5CC,YAAY,EAAEX,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS;cACvCE,OAAO,EAAEZ,IAAI,CAACS,OAAO,CAACT,IAAI,CAACS,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,CAACD,OAAO;cACtDE,cAAc,EAAEd,IAAI,CAACS,OAAO,CAACT,IAAI,CAACS,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,CAACD,OAAO;cAC7DG,QAAQ,EAAEf,IAAI,CAACS,OAAO;cACtBO,MAAM,EAAEhB,IAAI,CAACE,IAAI,CAACc,MAAM;cAAG;cAC3B9B,EAAE,EAAEA,EAAE;cAAG;cACTE,EAAE,EAAEA,EAAE;cAAG;cACTE,EAAE,EAAEA,EAAE;cAAG;cACTC,EAAE,EAAEA,EAAE,CAAG;YACb,CAAC;UACL,CAAC,CAAC;QACN,CAAC,MAAM;UACH7C,OAAO,CAACI,KAAK,CAAC,oCAAoC,CAAC;QACvD;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC9D;IACJ,CAAC;IAED,MAAMmE,gBAAgBA,CAACC,KAAK,EAAE;MAC1B,IAAI;QACA,MAAM;UAAEF,MAAM;UAAE9B,EAAE;UAAEE,EAAE;UAAEE,EAAE;UAAEC;QAAG,CAAC,GAAG2B,KAAK;QACxCxE,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEqE,MAAM,CAAC;QACjEtE,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEuC,EAAE,EAAEE,EAAE,EAAEE,EAAE,EAAEC,EAAE,CAAC;QAEjF,MAAMC,WAAW,GAAG,uDAAuDwB,MAAM,WAAWvB,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAAC,EAAE;QACnJlD,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAE6C,WAAW,CAAC;QAE1E,MAAMK,aAAa,GAAG,MAAM,IAAI,CAACC,WAAW,CAACtD,GAAG,CAACgD,WAAW,CAAC;QAC7D9C,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEkD,aAAa,CAACjD,IAAI,CAAC;QAE5E,IAAI,CAACuE,cAAc,CAAC,CAAC,CAAC,CAAE;;QAExB,IAAI,CAACC,eAAe,CAAClC,EAAE,EAAEE,EAAE,CAAC;QAC5B,IAAI,CAACgC,eAAe,CAAC9B,EAAE,EAAEC,EAAE,CAAC;QAC5B,IAAI,CAAC8B,iBAAiB,CAACxB,aAAa,CAACjD,IAAI,CAAC;QAE1C,IAAIiD,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACuB,QAAQ,EAAE;UACpC,MAAMA,QAAQ,GAAG,IAAIC,KAAK,CAACC,IAAI,CAACC,YAAY,CACxC,IAAIF,KAAK,CAACC,IAAI,CAACE,MAAM,CAAC7B,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACuB,QAAQ,CAACK,GAAG,EAAE9B,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACuB,QAAQ,CAACM,IAAI,CAAC,EACtG,IAAIL,KAAK,CAACC,IAAI,CAACE,MAAM,CAAC7B,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACuB,QAAQ,CAACO,MAAM,EAAEhC,aAAa,CAACjD,IAAI,CAACmD,MAAM,CAACuB,QAAQ,CAACQ,KAAK,CAC7G,CAAC;UACD,IAAI,CAACvD,GAAG,CAACwD,WAAW,CAACT,QAAQ,CAAC;QAClC;MACJ,CAAC,CAAC,OAAOxE,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACrE;IACJ,CAAC;IAEDqE,cAAcA,CAAA,EAAG;MACb,IAAI,CAAC1C,SAAS,CAACuD,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC;MACzD,IAAI,CAACzD,SAAS,GAAG,EAAE;IACvB,CAAC;IAGD0D,aAAaA,CAAA,EAAG;MACZ,IAAIC,MAAM,CAACb,KAAK,EAAE;QACd,IAAIc,UAAU,GAAG;UACbC,MAAM,EAAE,IAAIf,KAAK,CAACC,IAAI,CAACE,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC;UAChDa,IAAI,EAAE;QACV,CAAC;QACD,IAAI,CAAChE,GAAG,GAAG,IAAIgD,KAAK,CAACC,IAAI,CAACgB,GAAG,CAAC,KAAK,EAAEH,UAAU,CAAC;MACpD,CAAC,MAAM;QACH3F,OAAO,CAACI,KAAK,CAAC,6CAA6C,CAAC;MAChE;IACJ,CAAC;IAEDsE,eAAeA,CAACjC,CAAC,EAAEE,CAAC,EAAE;MAClB,IAAIkC,KAAK,CAACC,IAAI,CAACiB,MAAM,CAAC;QAClBC,QAAQ,EAAE,IAAInB,KAAK,CAACC,IAAI,CAACE,MAAM,CAACrC,CAAC,EAAEF,CAAC,CAAC;QACrCZ,GAAG,EAAE,IAAI,CAACA;MACd,CAAC,CAAC;IACN,CAAC;IAED8C,iBAAiBA,CAACzE,IAAI,EAAE;MACpB,IAAI+F,SAAS;MACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhG,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAAChC,MAAM,EAAE+B,CAAC,EAAE,EAAE;QAC9C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlG,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAACD,CAAC,CAAC,CAACG,OAAO,CAAClC,MAAM,EAAEiC,CAAC,EAAE,EAAE;UACzDH,SAAS,GAAG,EAAE;UACd,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpG,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAACD,CAAC,CAAC,CAACG,OAAO,CAACD,CAAC,CAAC,CAACG,QAAQ,CAACpC,MAAM,EAAEmC,CAAC,EAAE,EAAE;YACrEL,SAAS,CAACO,IAAI,CAAC,IAAI3B,KAAK,CAACC,IAAI,CAACE,MAAM,CAAC9E,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAACD,CAAC,CAAC,CAACG,OAAO,CAACD,CAAC,CAAC,CAACG,QAAQ,CAACD,CAAC,CAAC,CAAC3D,CAAC,EAAEzC,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAACD,CAAC,CAAC,CAACG,OAAO,CAACD,CAAC,CAAC,CAACG,QAAQ,CAACD,CAAC,CAAC,CAAC7D,CAAC,CAAC,CAAC;UACrI;UACA;UACA,IAAIgE,SAAS,GAAG,MAAM,CAAC,CAAE;UACzB,MAAMC,WAAW,GAAGxG,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAACD,CAAC,CAAC,CAACS,IAAI,CAAC,CAAE;UAC/C,IAAID,WAAW,KAAK,CAAC,EAAE;YACnB;YACA,MAAME,UAAU,GAAG1G,IAAI,CAACmD,MAAM,CAAC8C,IAAI,CAACD,CAAC,CAAC,CAACU,UAAU;YACjDH,SAAS,GAAGzF,gBAAgB,CAAC4F,UAAU,CAAC,IAAIH,SAAS;UACzD,CAAC,MAAM,IAAIC,WAAW,KAAK,CAAC,EAAE;YAC1B;YACAD,SAAS,GAAG,SAAS;UACzB,CAAC,MAAM,IAAIC,WAAW,KAAK,CAAC,EAAE;YAC1B;YACAD,SAAS,GAAG,SAAS;UACzB;UACA,MAAMlB,QAAQ,GAAG,IAAIV,KAAK,CAACC,IAAI,CAAC+B,QAAQ,CAAC;YACrChF,GAAG,EAAE,IAAI,CAACA,GAAG;YACbyB,IAAI,EAAE2C,SAAS;YACfa,YAAY,EAAE,CAAC;YACfC,WAAW,EAAEN;UACjB,CAAC,CAAC;UACF,IAAI,CAAC1E,SAAS,CAACyE,IAAI,CAACjB,QAAQ,CAAC,CAAC,CAAE;QACpC;MACJ;IACJ,CAAC;IAEDyB,iBAAiBA,CAAC9G,IAAI,EAAE;MACpB,IAAI;QACAF,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEC,IAAI,CAAC;QAErE,MAAM+G,cAAc,GAAG/G,IAAI,CAACmD,MAAM;QAClC,IAAI4D,cAAc,EAAE;UAChB;UACA,IAAI,CAACvC,eAAe,CAACxE,IAAI,CAACsC,EAAE,EAAEtC,IAAI,CAACwC,EAAE,CAAC;UACtC,IAAI,CAACgC,eAAe,CAACxE,IAAI,CAAC0C,EAAE,EAAE1C,IAAI,CAAC2C,EAAE,CAAC;UACtC,IAAI,CAAC8B,iBAAiB,CAACsC,cAAc,CAAC;UAEtC,IAAIA,cAAc,CAAC5D,MAAM,CAACuB,QAAQ,EAAE;YAChC,MAAMA,QAAQ,GAAG,IAAIC,KAAK,CAACC,IAAI,CAACC,YAAY,CACxC,IAAIF,KAAK,CAACC,IAAI,CAACE,MAAM,CAACiC,cAAc,CAAC5D,MAAM,CAACuB,QAAQ,CAACK,GAAG,EAAEgC,cAAc,CAAC5D,MAAM,CAACuB,QAAQ,CAACM,IAAI,CAAC,EAC9F,IAAIL,KAAK,CAACC,IAAI,CAACE,MAAM,CAACiC,cAAc,CAAC5D,MAAM,CAACuB,QAAQ,CAACO,MAAM,EAAE8B,cAAc,CAAC5D,MAAM,CAACuB,QAAQ,CAACQ,KAAK,CACrG,CAAC;YACD,IAAI,CAACvD,GAAG,CAACwD,WAAW,CAACT,QAAQ,CAAC;UAClC;QACJ,CAAC,MAAM;UACH5E,OAAO,CAACI,KAAK,CAAC,sCAAsC,EAAE6G,cAAc,CAAC;QACzE;MACJ,CAAC,CAAC,OAAO7G,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MACjE;IACJ,CAAC;IAED8G,UAAUA,CAACC,OAAO,EAAE;MAChB,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;MACtC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;MACzB,OAAO,GAAGC,KAAK,MAAMG,IAAI,GAAG;IAChC,CAAC;IAEDC,YAAYA,CAACd,WAAW,EAAEe,UAAU,EAAE;MAClC,IAAIf,WAAW,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK;MAChB,CAAC,MAAM,IAAIA,WAAW,KAAK,CAAC,EAAE;QAC1B,OAAO,MAAMe,UAAU,EAAE;MAC7B,CAAC,MAAM;QACH,OAAO,MAAM;MACjB;IACJ,CAAC;IAEDC,SAASA,CAAC3D,OAAO,EAAEC,SAAS,EAAEmC,IAAI,EAAE;MAChC,IAAIpC,OAAO,CAAC2C,WAAW,KAAK,CAAC,EAAE;QAC3B,OAAO,OAAOP,IAAI,CAACtE,GAAG,CAAC8F,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,MAAM7D,SAAS,GAAG;MACpE,CAAC,MAAM,IAAID,OAAO,CAAC2C,WAAW,KAAK,CAAC,EAAE;QAClC,OAAO,MAAMP,IAAI,CAACtE,GAAG,CAAC8F,CAAC,IAAIA,CAAC,CAACG,KAAK,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC,QAAQ7D,SAAS,EAAE;MACrE,CAAC,MAAM;QACH,OAAO,QAAQA,SAAS,EAAE;MAC9B;IACJ;EACJ,CAAC;EACD,MAAM+D,OAAOA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAACtC,aAAa,CAAC,CAAC;IACpB,MAAM,IAAI,CAACrD,SAAS,CAAC,CAAC;EAC1B,CAAC;EACD4F,KAAK,EAAE;IACH5G,UAAUA,CAAC6G,aAAa,EAAE;MACtB,IAAI,CAACvG,eAAe,GAAGuG,aAAa;IACxC,CAAC;IACD5G,QAAQA,CAAC6G,WAAW,EAAE;MAClB,IAAI,CAACvG,aAAa,GAAGuG,WAAW;IACpC;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
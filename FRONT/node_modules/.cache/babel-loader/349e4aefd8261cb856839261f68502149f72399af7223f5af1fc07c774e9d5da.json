{"ast":null,"code":"import MapView from '../assets/js/MapView';\nexport default {\n  mixins: [MapView],\n  methods: {\n    getTrafficClass(subPath, isBar = false) {\n      const prefix = isBar ? 'bar_' : '';\n      if (subPath.trafficType === 2) {\n        return `${prefix}bus${subPath.lane[0].type}`;\n      } else if (subPath.trafficType === 1) {\n        return `${prefix}sub${subPath.lane[0].subwayCode}`;\n      } else {\n        return `${prefix}line_walk`;\n      }\n    },\n    filteredSubPaths(subPaths) {\n      return subPaths.filter(subPath => subPath.trafficType !== 3);\n    },\n    async handleRouteClick() {\n      await this.findRoute();\n      if (this.routes.length > 0) {\n        const mapObj = this.routes[0].mapObj; // Ï≤´ Î≤àÏß∏ Í≤ΩÎ°úÏùò mapObj ÏÇ¨Ïö©\n        console.log(mapObj);\n        this.displayRoute(mapObj);\n      } else {\n        console.error('No routes found');\n      }\n    }\n  }\n};","map":{"version":3,"names":["MapView","mixins","methods","getTrafficClass","subPath","isBar","prefix","trafficType","lane","type","subwayCode","filteredSubPaths","subPaths","filter","handleRouteClick","findRoute","routes","length","mapObj","console","log","displayRoute","error"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/components/MapView.vue"],"sourcesContent":["<template>\n    <div class=\"map-view\">\n        <div id=\"controls\">\n            <div class=\"control-item\">\n                <label for=\"startAddress\">Ï∂úÎ∞úÏßÄ</label>\n                <input type=\"text\" id=\"startAddress\" v-model=\"localStartPoint\">\n            </div>\n            <div class=\"control-item\">\n                <label for=\"endAddress\">ÎèÑÏ∞©ÏßÄ</label>\n                <input type=\"text\" id=\"endAddress\" v-model=\"localEndPoint\">\n            </div>\n            <button @click=\"findRoute\">Í∏∏Ï∞æÍ∏∞</button>\n        </div>\n        <div id=\"results\">\n            <h3>  üß≠ Í≤ΩÎ°úÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî! üß≠  </h3>\n\n            <div class=\"route-list-box\">\n                <ul class=\"route-list\">\n                    <li v-for=\"(route, index) in routes\" :key=\"index\" class=\"route-data\">\n                        <div class=\"route_con\" @click=\"handleRouteClick\">\n                            <div class=\"route_time_header\"> [Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ] {{ formatTime(route.totalTime) }}</div>\n                            <div class=\"route_time\">\n                                <span class=\"info_sub\">\n                                    <span>ÌôòÏäπ {{ route.subwayTransitCount + route.busTransitCount - 1 }}Ìöå | </span>\n                                    <span>{{ route.payment }}Ïõê | </span>\n                                    <span>{{ (route.totalDistance / 1000).toFixed(1) }}km</span>\n                                </span>\n                            </div>\n                            <div class=\"route_bar\">\n                                <span \n                                    v-for=\"(subPath, subIndex) in route.subPaths\" \n                                    :key=\"subIndex\"\n                                    :class=\"['bar_area', getTrafficClass(subPath, true)]\"\n                                    :style=\"{ flexBasis: `${subPath.sectionTime * 100}%`, minWidth: '6.5%' }\"\n                                >\n                                    <!-- <span class=\"icon\"></span> -->\n                                    <span class=\"bar\">\n                                        <span class=\"time\">{{ subPath.sectionTime }}Î∂Ñ</span>\n                                    </span>\n                                </span>\n                            </div>\n                            <!--  -->\n                            <div class=\"route_detail\">\n                                <ul class=\"route-detail-list\">\n                                    <li v-for=\"(subPath, subIndex) in filteredSubPaths(route.subPaths)\" :key=\"subIndex\" class=\"line\">\n                                        <span class=\"icon\" :class=\"getTrafficClass(subPath)\"></span>\n                                        <span class=\"r_body\">\n                                            <span class=\"r_action\">{{ getAction(subPath, subPath.startName, subPath.lane) }}</span>\n                                        </span>\n                                    </li>\n                                    <li :key=\"route.subPaths.length\" class=\"line\">\n                                        <span class=\"icon\"></span>\n                                        <span class=\"r_body\">\n                                            <span class=\"r_title\">‚û™ {{ route.lastEndStation }} ÌïòÏ∞®</span>\n                                        </span>\n                                    </li>\n                                </ul>\n                            <div class=\"maker\" style=\"display: none;\">powered by<em>www.ODsay.com</em></div>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n            </div>\n        </div>\n        <div id=\"map\"></div>\n    </div>\n</template>\n\n<script>\nimport MapView from '../assets/js/MapView';\n\nexport default {\n    mixins: [MapView],\n    methods: {\n        getTrafficClass(subPath, isBar = false) {\n            const prefix = isBar ? 'bar_' : '';\n            if (subPath.trafficType === 2) {\n                return `${prefix}bus${subPath.lane[0].type}`;\n            } else if (subPath.trafficType === 1) {\n                return `${prefix}sub${subPath.lane[0].subwayCode}`;\n            } else {\n                return `${prefix}line_walk`;\n            }\n        },\n        filteredSubPaths(subPaths) {\n            return subPaths.filter(subPath => subPath.trafficType !== 3);\n        },\n        async handleRouteClick() {\n            await this.findRoute();\n            if (this.routes.length > 0) {\n                const mapObj = this.routes[0].mapObj;  // Ï≤´ Î≤àÏß∏ Í≤ΩÎ°úÏùò mapObj ÏÇ¨Ïö©\n                console.log(mapObj);\n                this.displayRoute(mapObj);\n            } else {\n                console.error('No routes found');\n            }\n        }\n    },\n};\n</script>\n\n<style scoped>\n@import '../assets/css/MapView.css';\n\n\n</style>\n"],"mappings":"AAqEA,OAAOA,OAAM,MAAO,sBAAsB;AAE1C,eAAe;EACXC,MAAM,EAAE,CAACD,OAAO,CAAC;EACjBE,OAAO,EAAE;IACLC,eAAeA,CAACC,OAAO,EAAEC,KAAI,GAAI,KAAK,EAAE;MACpC,MAAMC,MAAK,GAAID,KAAI,GAAI,MAAK,GAAI,EAAE;MAClC,IAAID,OAAO,CAACG,WAAU,KAAM,CAAC,EAAE;QAC3B,OAAO,GAAGD,MAAM,MAAMF,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE;MAChD,OAAO,IAAIL,OAAO,CAACG,WAAU,KAAM,CAAC,EAAE;QAClC,OAAO,GAAGD,MAAM,MAAMF,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC,CAACE,UAAU,EAAE;MACtD,OAAO;QACH,OAAO,GAAGJ,MAAM,WAAW;MAC/B;IACJ,CAAC;IACDK,gBAAgBA,CAACC,QAAQ,EAAE;MACvB,OAAOA,QAAQ,CAACC,MAAM,CAACT,OAAM,IAAKA,OAAO,CAACG,WAAU,KAAM,CAAC,CAAC;IAChE,CAAC;IACD,MAAMO,gBAAgBA,CAAA,EAAG;MACrB,MAAM,IAAI,CAACC,SAAS,CAAC,CAAC;MACtB,IAAI,IAAI,CAACC,MAAM,CAACC,MAAK,GAAI,CAAC,EAAE;QACxB,MAAMC,MAAK,GAAI,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC,CAACE,MAAM,EAAG;QACvCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;QACnB,IAAI,CAACG,YAAY,CAACH,MAAM,CAAC;MAC7B,OAAO;QACHC,OAAO,CAACG,KAAK,CAAC,iBAAiB,CAAC;MACpC;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
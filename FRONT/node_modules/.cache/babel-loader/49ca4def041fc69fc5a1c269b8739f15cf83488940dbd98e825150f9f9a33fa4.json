{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport async function handleSignup() {\n  // 비밀번호와 비밀번호 확인 일치 여부 확인\n  if (this.signupData.password !== this.signupData.confirmPassword) {\n    alert('비밀번호가 일치하지 않습니다.');\n    return;\n  }\n\n  // 예시로, ngrok의 백엔드 서버로 회원가입 요청 보내기\n  try {\n    const response = await fetch('https://d5bf569728f0.ngrok.app/api/signup/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.signupData)\n    });\n    const data = await response.json();\n    if (data.success) {\n      console.log('회원가입 성공:', data);\n      // 회원가입 성공 후 동작 (예: 로그인 페이지로 이동)\n      this.$router.push('/login');\n    } else {\n      console.error('회원가입 실패:', data.message);\n      alert('회원가입 실패: ' + data.message);\n    }\n  } catch (error) {\n    console.error('회원가입 에러:', error);\n    alert('회원가입 에러: ' + error.message);\n  }\n}\nexport function redirectToLogin() {\n  // 로그인 페이지로 리다이렉트\n  console.log('로그인 페이지로 이동');\n  // 실제 구현에서는 라우터를 사용하여 페이지 이동\n  this.$router.push('/login');\n}","map":{"version":3,"names":["handleSignup","signupData","password","confirmPassword","alert","response","fetch","method","headers","body","JSON","stringify","data","json","success","console","log","$router","push","error","message","redirectToLogin"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/Signup.js"],"sourcesContent":["export async function handleSignup() {\n    // 비밀번호와 비밀번호 확인 일치 여부 확인\n    if (this.signupData.password !== this.signupData.confirmPassword) {\n        alert('비밀번호가 일치하지 않습니다.');\n        return;\n    }\n\n     // 예시로, ngrok의 백엔드 서버로 회원가입 요청 보내기\n    try {\n        const response = await fetch('https://d5bf569728f0.ngrok.app/api/signup/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(this.signupData)\n        });\n\n        const data = await response.json();\n\n        if (data.success) {\n            console.log('회원가입 성공:', data);\n            // 회원가입 성공 후 동작 (예: 로그인 페이지로 이동)\n            this.$router.push('/login');\n        } else {\n            console.error('회원가입 실패:', data.message);\n            alert('회원가입 실패: ' + data.message);\n        }\n    } catch (error) {\n        console.error('회원가입 에러:', error);\n        alert('회원가입 에러: ' + error.message);\n    }\n}\n\nexport function redirectToLogin() {\n    // 로그인 페이지로 리다이렉트\n    console.log('로그인 페이지로 이동');\n    // 실제 구현에서는 라우터를 사용하여 페이지 이동\n    this.$router.push('/login');\n}\n"],"mappings":";AAAA,OAAO,eAAeA,YAAYA,CAAA,EAAG;EACjC;EACA,IAAI,IAAI,CAACC,UAAU,CAACC,QAAQ,KAAK,IAAI,CAACD,UAAU,CAACE,eAAe,EAAE;IAC9DC,KAAK,CAAC,kBAAkB,CAAC;IACzB;EACJ;;EAEC;EACD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACvEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACV,UAAU;IACxC,CAAC,CAAC;IAEF,MAAMW,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,OAAO,EAAE;MACdC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEJ,IAAI,CAAC;MAC7B;MACA,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC,MAAM;MACHH,OAAO,CAACI,KAAK,CAAC,UAAU,EAAEP,IAAI,CAACQ,OAAO,CAAC;MACvChB,KAAK,CAAC,WAAW,GAAGQ,IAAI,CAACQ,OAAO,CAAC;IACrC;EACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChCf,KAAK,CAAC,WAAW,GAAGe,KAAK,CAACC,OAAO,CAAC;EACtC;AACJ;AAEA,OAAO,SAASC,eAAeA,CAAA,EAAG;EAC9B;EACAN,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC1B;EACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
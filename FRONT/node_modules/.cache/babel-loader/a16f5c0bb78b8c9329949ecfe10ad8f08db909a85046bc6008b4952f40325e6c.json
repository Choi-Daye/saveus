{"ast":null,"code":"import MapView from '../assets/js/MapView';\nexport default {\n  props: {\n    startPoint: String,\n    endPoint: String\n  },\n  mixins: [MapView],\n  data() {\n    return {\n      localStartPoint: this.startPoint,\n      localEndPoint: this.endPoint,\n      routes: [],\n      map: null\n    };\n  },\n  methods: {\n    getTrafficClass(subPath, isBar = false) {\n      const prefix = isBar ? 'bar_' : '';\n      if (subPath.trafficType === 2) {\n        const busClass = `${prefix}bus${subPath.lane && subPath.lane[0] ? subPath.lane[0].type : ''}`;\n        console.log('Bus class:', busClass);\n        return busClass;\n      } else if (subPath.trafficType === 1) {\n        const subClass = `${prefix}sub${subPath.lane && subPath.lane[0] ? subPath.lane[0].subwayCode : ''}`;\n        console.log('Subway class:', subClass);\n        return subClass;\n      } else {\n        const walkClass = `${prefix}line_walk`;\n        console.log('Walk class:', walkClass);\n        return walkClass;\n      }\n    },\n    filteredSubPaths(subPaths) {\n      return subPaths.filter(subPath => subPath.trafficType !== 3);\n    }\n  },\n  async mounted() {\n    this.initializeMap();\n  }\n};","map":{"version":3,"names":["MapView","props","startPoint","String","endPoint","mixins","data","localStartPoint","localEndPoint","routes","map","methods","getTrafficClass","subPath","isBar","prefix","trafficType","busClass","lane","type","console","log","subClass","subwayCode","walkClass","filteredSubPaths","subPaths","filter","mounted","initializeMap"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/components/MapView.vue"],"sourcesContent":["<template>\n    <div class=\"map-view\">\n        <div id=\"controls\">\n            <div class=\"control-item\">\n                <label for=\"startAddress\">Ï∂úÎ∞úÏßÄ</label>\n                <input type=\"text\" id=\"startAddress\" v-model=\"localStartPoint\">\n            </div>\n            <div class=\"control-item\">\n                <label for=\"endAddress\">ÎèÑÏ∞©ÏßÄ</label>\n                <input type=\"text\" id=\"endAddress\" v-model=\"localEndPoint\">\n            </div>\n            <button @click=\"findRoute\">Í∏∏Ï∞æÍ∏∞</button>\n        </div>\n        <div id=\"results\">\n            <h3>  üß≠ Í≤ΩÎ°úÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî! üß≠  </h3>\n\n            <div class=\"route-list-box\">\n                <ul class=\"route-list\">\n                    <li v-for=\"(route, index) in routes\" :key=\"index\" class=\"route-data\">\n                        <div class=\"route_con\" @click=\"handleRouteClick(route)\">\n                            <div class=\"route_time_header\"> [Ï¥ù ÏÜåÏöî ÏãúÍ∞Ñ] {{ formatTime(route.totalTime) }}</div>\n                            <div class=\"route_time\">\n                                <span class=\"info_sub\">\n                                    <span>ÌôòÏäπ {{ route.subwayTransitCount + route.busTransitCount - 1 }}Ìöå | </span>\n                                    <span>{{ route.payment }}Ïõê | </span>\n                                    <span>{{ (route.totalDistance / 1000).toFixed(1) }}km</span>\n                                </span>\n                            </div>\n                            <div class=\"route_bar\">\n                                <span \n                                    v-for=\"(subPath, subIndex) in route.subPaths\" \n                                    :key=\"subIndex\"\n                                    :class=\"['bar_area', getTrafficClass(subPath, true)]\"\n                                    :style=\"{ flexBasis: `${subPath.sectionTime * 100}%`, minWidth: '6.5%' }\"\n                                >\n                                    <!-- <span class=\"icon\"></span> -->\n                                    <span class=\"bar\">\n                                        <span class=\"time\">{{ subPath.sectionTime }}Î∂Ñ</span>\n                                    </span>\n                                </span>\n                            </div>\n                            <!--  -->\n                            <div class=\"route_detail\">\n                                <ul class=\"route-detail-list\">\n                                    <li v-for=\"(subPath, subIndex) in filteredSubPaths(route.subPaths)\" :key=\"subIndex\" class=\"line\">\n                                        <span class=\"icon\" :class=\"getTrafficClass(subPath)\"></span>\n                                        <span class=\"r_body\">\n                                            <span class=\"r_action\">{{ getAction(subPath, subPath.startName, subPath.lane) }}</span>\n                                        </span>\n                                    </li>\n                                    <li :key=\"route.subPaths.length\" class=\"line\">\n                                        <span class=\"icon\"></span>\n                                        <span class=\"r_body\">\n                                            <span class=\"r_title\">‚û™ {{ route.lastEndStation }} ÌïòÏ∞®</span>\n                                        </span>\n                                    </li>\n                                </ul>\n                            <div class=\"maker\" style=\"display: none;\">powered by<em>www.ODsay.com</em></div>\n                        </div>\n                    </div>\n                </li>\n            </ul>\n            </div>\n        </div>\n        <div id=\"map\"></div>\n    </div>\n</template>\n\n<script>\nimport MapView from '../assets/js/MapView';\n\nexport default {\n    props: {\n        startPoint: String,\n        endPoint: String,\n    },\n    mixins: [MapView],\n    data() {\n        return {\n            localStartPoint: this.startPoint,\n            localEndPoint: this.endPoint,\n            routes: [],\n            map: null,\n        };\n    },\n    methods: {\n        getTrafficClass(subPath, isBar = false) {\n        const prefix = isBar ? 'bar_' : '';\n            if (subPath.trafficType === 2) {\n                const busClass = `${prefix}bus${subPath.lane && subPath.lane[0] ? subPath.lane[0].type : ''}`;\n                console.log('Bus class:', busClass);\n                return busClass;\n            } else if (subPath.trafficType === 1) {\n                const subClass = `${prefix}sub${subPath.lane && subPath.lane[0] ? subPath.lane[0].subwayCode : ''}`;\n                console.log('Subway class:', subClass);\n                return subClass;\n            } else {\n                const walkClass = `${prefix}line_walk`;\n                console.log('Walk class:', walkClass);\n                return walkClass;\n            }\n        },\n        filteredSubPaths(subPaths) {\n            return subPaths.filter(subPath => subPath.trafficType !== 3);\n        },\n        \n    },\n    async mounted() {\n        this.initializeMap();\n    },\n};\n</script>\n\n<style scoped>\n@import '../assets/css/MapView.css';\n</style>"],"mappings":"AAqEA,OAAOA,OAAM,MAAO,sBAAsB;AAE1C,eAAe;EACXC,KAAK,EAAE;IACHC,UAAU,EAAEC,MAAM;IAClBC,QAAQ,EAAED;EACd,CAAC;EACDE,MAAM,EAAE,CAACL,OAAO,CAAC;EACjBM,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,eAAe,EAAE,IAAI,CAACL,UAAU;MAChCM,aAAa,EAAE,IAAI,CAACJ,QAAQ;MAC5BK,MAAM,EAAE,EAAE;MACVC,GAAG,EAAE;IACT,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,eAAeA,CAACC,OAAO,EAAEC,KAAI,GAAI,KAAK,EAAE;MACxC,MAAMC,MAAK,GAAID,KAAI,GAAI,MAAK,GAAI,EAAE;MAC9B,IAAID,OAAO,CAACG,WAAU,KAAM,CAAC,EAAE;QAC3B,MAAMC,QAAO,GAAI,GAAGF,MAAM,MAAMF,OAAO,CAACK,IAAG,IAAKL,OAAO,CAACK,IAAI,CAAC,CAAC,IAAIL,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,IAAG,GAAI,EAAE,EAAE;QAC7FC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAAC;QACnC,OAAOA,QAAQ;MACnB,OAAO,IAAIJ,OAAO,CAACG,WAAU,KAAM,CAAC,EAAE;QAClC,MAAMM,QAAO,GAAI,GAAGP,MAAM,MAAMF,OAAO,CAACK,IAAG,IAAKL,OAAO,CAACK,IAAI,CAAC,CAAC,IAAIL,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC,CAACK,UAAS,GAAI,EAAE,EAAE;QACnGH,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAAC;QACtC,OAAOA,QAAQ;MACnB,OAAO;QACH,MAAME,SAAQ,GAAI,GAAGT,MAAM,WAAW;QACtCK,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,SAAS,CAAC;QACrC,OAAOA,SAAS;MACpB;IACJ,CAAC;IACDC,gBAAgBA,CAACC,QAAQ,EAAE;MACvB,OAAOA,QAAQ,CAACC,MAAM,CAACd,OAAM,IAAKA,OAAO,CAACG,WAAU,KAAM,CAAC,CAAC;IAChE;EAEJ,CAAC;EACD,MAAMY,OAAOA,CAAA,EAAG;IACZ,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-078caa85\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chatbot\"\n};\nconst _hoisted_2 = {\n  class: \"chat-window\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"message-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 채팅 메시지가 여기에 나타납니다 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"chat-message\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(message.text.split('\\n'), (line, lineIndex) => {\n      return _openBlock(), _createElementBlock(_Fragment, {\n        key: `${index}-${lineIndex}`\n      }, [_createElementVNode(\"div\", {\n        class: _normalizeClass(['message', message.sender])\n      }, _toDisplayString(line), 3 /* TEXT, CLASS */), lineIndex < message.text.split('\\n').length - 1 ? (_openBlock(), _createElementBlock(\"br\", _hoisted_3)) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"질문을 입력하세요\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"전송\")])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_Fragment","_renderList","$data","messages","message","index","text","split","line","lineIndex","_normalizeClass","sender","length","_hoisted_3","_hoisted_4","_cache","$event","userInput","onKeyup","_withKeys","args","$options","sendMessage","placeholder","onClick"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/views/ChatBot.vue"],"sourcesContent":["<template>\n    <div class=\"chatbot\">\n        <div class=\"chat-window\">\n            <!-- 채팅 메시지가 여기에 나타납니다 -->\n            <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-message\">\n                <template v-for=\"(line, lineIndex) in message.text.split('\\n')\" :key=\"`${index}-${lineIndex}`\">\n                    <div :class=\"['message', message.sender]\">\n                        {{ line }}\n                    </div>\n                    <br v-if=\"lineIndex < message.text.split('\\n').length - 1\">\n                </template>\n            </div>\n        </div>\n        <div class=\"message-input\">\n            <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"질문을 입력하세요\" />\n            <button @click=\"sendMessage\">전송</button>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'ChatBot',\n    props: ['selectedPayment'],\n    data() {\n        return {\n            messages: [],\n            userInput: ''\n        };\n    },\n    methods: {\n        sendMessage() {\n            if (this.userInput.trim() !== '') {\n                this.messages.push({ sender: 'user', text: this.userInput });\n                this.userInput = '';\n                this.getBotResponse(this.userInput);\n            }\n        },\n        getBotResponse(message) {\n            let botResponse = '이것은 봇의 응답입니다.';\n            if (message.toLowerCase().includes('안녕하세요')) {\n                botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n            } else if (message.toLowerCase().includes('도움')) {\n                botResponse = '물론이죠, 무엇을 도와드릴까요?';\n            }\n            this.messages.push({ sender: 'bot', text: botResponse });\n            this.scrollToEnd();\n        },\n        formatNumber(value) {\n            return value.toLocaleString();\n        },\n        async calculateCost(payment) {\n            try {\n                const response = await fetch(`https://api.example.com/calculate/cost?payment=${payment}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return await response.json();\n            } catch (error) {\n                console.error('Error calculating cost:', error);\n                return { minValue: 0, maxValue: 0 };\n            }\n        },\n        async handleRouteClickPayment(payment) {\n            try {\n                const { minValue, maxValue } = await this.calculateCost(payment);\n                const botResponse = `현재 선택한 경로의 편도 교통비는 ${this.formatNumber(payment)}원 입니다. \\n 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${this.formatNumber(minValue)}원, 최대 ${this.formatNumber(maxValue)}원을 지불하게 됩니다.`;\n                this.messages.push({ sender: 'bot', text: botResponse });\n                this.scrollToEnd();\n            } catch ( error) {\n                console.error(\"Error in handleRouteClickPayment:\", error);\n            }\n        },\n        scrollToEnd() {\n            const chatWindow = this.$el.querySelector('.chat-window');\n            chatWindow.scrollTop = chatWindow.scrollHeight;\n        }\n    }\n};\n</script>\n\n<style scoped src=\"../assets/css/ChatBot.css\"></style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAS;;EACXA,KAAK,EAAC;AAAa;;EAFhCC,GAAA;AAAA;;EAaaD,KAAK,EAAC;AAAe;;uBAZ9BE,mBAAA,CAgBM,OAhBNC,UAgBM,GAfFC,mBAAA,CAUM,OAVNC,UAUM,GATFC,mBAAA,uBAA0B,G,kBAC1BJ,mBAAA,CAOMK,SAAA,QAXlBC,WAAA,CAI4CC,KAAA,CAAAC,QAAQ,EAJpD,CAIyBC,OAAO,EAAEC,KAAK;yBAA3BV,mBAAA,CAOM;MAPqCD,GAAG,EAAEW,KAAK;MAAEZ,KAAK,EAAC;2BACzDE,mBAAA,CAKWK,SAAA,QAV3BC,WAAA,CAKsDG,OAAO,CAACE,IAAI,CAACC,KAAK,QALxE,CAKkCC,IAAI,EAAEC,SAAS;2BALjDd,mBAAA,CAAAK,SAAA;QAAAN,GAAA,KAKyFW,KAAK,IAAII,SAAS;UACvFZ,mBAAA,CAEM;QAFAJ,KAAK,EAN/BiB,eAAA,aAM6CN,OAAO,CAACO,MAAM;0BAChCH,IAAI,yBAEDC,SAAS,GAAGL,OAAO,CAACE,IAAI,CAACC,KAAK,OAAOK,MAAM,Q,cAArDjB,mBAAA,CAA2D,MAT/EkB,UAAA,KAAAd,mBAAA,e;;oCAaQF,mBAAA,CAGM,OAHNiB,UAGM,G,gBAFFjB,mBAAA,CAAgF;IAd5F,uBAAAkB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAc4Bd,KAAA,CAAAe,SAAS,GAAAD,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MAd7CI,SAAA,KAAAC,IAAA,KAcqDC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,WAAW,EAAC;iEAAlDrB,KAAA,CAAAe,SAAS,E,GACzBpB,mBAAA,CAAwC;IAA/B2B,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport function handleLogin() {\n  // 로그인 로직 구현 (예: 서버에 로그인 요청 보내기)\n  console.log('로그인 시도 중...', this.loginData);\n  // 예시로, ngrok의 백엔드 서버로 로그인 요청 보내기\n  fetch('https://d5bf569728f0.ngrok.app/api/login/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(this.loginData)\n  }).then(response => response.json()).then(data => {\n    if (data.success) {\n      console.log('로그인 성공:', data);\n      // 로그인 성공 후 동작 (예: 페이지 이동)\n    } else {\n      console.error('로그인 실패:', data.message);\n      alert('로그인 실패: ' + data.message);\n    }\n  }).catch(error => {\n    console.error('로그인 에러:', error);\n    alert('로그인 에러: ' + error.message);\n  });\n}\nexport function redirectToLogin() {\n  // 로그인 페이지로 리다이렉트\n  console.log('로그인 페이지로 이동');\n  // 실제 구현에서는 라우터를 사용하여 페이지 이동\n  this.$router.push('/login');\n}\nexport function redirectToSignup() {\n  // 회원가입 페이지로 리다이렉트\n  console.log('회원가입 페이지로 이동');\n  // 실제 구현에서는 라우터를 사용하여 페이지 이동\n  this.$router.push('/signup');\n}","map":{"version":3,"names":["handleLogin","console","log","loginData","fetch","method","headers","body","JSON","stringify","then","response","json","data","success","error","message","alert","catch","redirectToLogin","$router","push","redirectToSignup"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/login.js"],"sourcesContent":["export function handleLogin() {\n    // 로그인 로직 구현 (예: 서버에 로그인 요청 보내기)\n    console.log('로그인 시도 중...', this.loginData);\n    // 예시로, ngrok의 백엔드 서버로 로그인 요청 보내기\n    fetch('https://d5bf569728f0.ngrok.app/api/login/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.loginData)\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            console.log('로그인 성공:', data);\n            // 로그인 성공 후 동작 (예: 페이지 이동)\n        } else {\n            console.error('로그인 실패:', data.message);\n            alert('로그인 실패: ' + data.message);\n        }\n    })\n    .catch(error => {\n        console.error('로그인 에러:', error);\n        alert('로그인 에러: ' + error.message);\n    });\n}\n\nexport function redirectToLogin() {\n    // 로그인 페이지로 리다이렉트\n    console.log('로그인 페이지로 이동');\n    // 실제 구현에서는 라우터를 사용하여 페이지 이동\n    this.$router.push('/login');\n}\n\nexport function redirectToSignup() {\n    // 회원가입 페이지로 리다이렉트\n    console.log('회원가입 페이지로 이동');\n    // 실제 구현에서는 라우터를 사용하여 페이지 이동\n    this.$router.push('/signup');\n}"],"mappings":";AAAA,OAAO,SAASA,WAAWA,CAAA,EAAG;EAC1B;EACAC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACC,SAAS,CAAC;EAC1C;EACAC,KAAK,CAAC,2CAA2C,EAAE;IAC/CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACN,SAAS;EACvC,CAAC,CAAC,CACDO,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACV,IAAIA,IAAI,CAACC,OAAO,EAAE;MACdb,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEW,IAAI,CAAC;MAC5B;IACJ,CAAC,MAAM;MACHZ,OAAO,CAACc,KAAK,CAAC,SAAS,EAAEF,IAAI,CAACG,OAAO,CAAC;MACtCC,KAAK,CAAC,UAAU,GAAGJ,IAAI,CAACG,OAAO,CAAC;IACpC;EACJ,CAAC,CAAC,CACDE,KAAK,CAACH,KAAK,IAAI;IACZd,OAAO,CAACc,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/BE,KAAK,CAAC,UAAU,GAAGF,KAAK,CAACC,OAAO,CAAC;EACrC,CAAC,CAAC;AACN;AAEA,OAAO,SAASG,eAAeA,CAAA,EAAG;EAC9B;EACAlB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC1B;EACA,IAAI,CAACkB,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;AAC/B;AAEA,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAC/B;EACArB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC3B;EACA,IAAI,CAACkB,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
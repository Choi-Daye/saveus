{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport axios from 'axios';\n// import WebSocketClient from '../../utils/WebSocketClient';\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n  try {\n    const response = await axios.get('https://d5bf569728f0.ngrok.app/odsay/set-csrf-token/', {\n      withCredentials: true\n    });\n    console.log('MapView.js >> CSRF token received:', response.data);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('MapView.js >> Error fetching CSRF token:', error);\n    throw error; // 에러 발생 시 throw로 전달\n  }\n};\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n  baseURL: 'https://d5bf569728f0.ngrok.app',\n  // ngrok 도메인 설정\n  withCredentials: true // 자격 증명 포함\n});\naxiosInstance.interceptors.request.use(async config => {\n  try {\n    const token = await getCsrfToken();\n    config.headers['X-CSRFToken'] = token;\n    console.log('MapView.js >> CSRF token set in request headers:', token);\n    return config;\n  } catch (error) {\n    console.error('MapView.js >> Failed to set CSRF token in request headers:', error);\n    return Promise.reject(error); // 에러 발생 시 요청 중단\n  }\n});\nexport default {\n  props: {\n    memHome: String,\n    startPoint: String,\n    endPoint: String,\n    memYoungY: Boolean,\n    memYoungN: Boolean,\n    memSubsidiaryYn: Boolean\n  },\n  data() {\n    return {\n      localStartPoint: this.startPoint,\n      localEndPoint: this.endPoint,\n      routes: [],\n      wsClient: null,\n      cards: [{\n        id: 1,\n        imgSrc: \"images/광주은행_신용_후불.jpg\",\n        imgWidth: \"200px\",\n        altText: \"광주은행_신용_후불\",\n        link: \"detail_page_1.html\"\n      }, {\n        id: 2,\n        imgSrc: \"images/기업은행_신용_후불.webp\",\n        altText: \"기업은행_신용_후불\",\n        link: \"detail_page_2.html\"\n      }, {\n        id: 3,\n        imgSrc: \"images/기업은행_체크_후불.webp\",\n        altText: \"기업은행_신용_후불\",\n        link: \"detail_page_3.html\"\n      }, {\n        id: 4,\n        imgSrc: \"images/기후동행카드.webp\",\n        imgWidth: \"300px\",\n        imgHeight: \"300px\",\n        altText: \"기후동행카드\",\n        link: \"detail_page_4.html\"\n      }, {\n        id: 5,\n        imgSrc: \"images/농협_체크_후불.webp\",\n        altText: \"농협_체크_후불\",\n        link: \"detail_page_5.html\"\n      }, {\n        id: 6,\n        imgSrc: \"images/농협카드_신용_후불.webp\",\n        altText: \"농협카드_신용_후불\",\n        link: \"detail_page_6.html\"\n      }, {\n        id: 7,\n        imgSrc: \"images/바로카드_신용_후불.png\",\n        imgWidth: \"200px\",\n        altText: \"바로카드_신용_후불\",\n        link: \"detail_page_7.html\"\n      }, {\n        id: 8,\n        imgSrc: \"images/삼성카드_신용_후불.gif\",\n        altText: \"삼성카드_신용_후불\",\n        link: \"detail_page_8.html\"\n      }, {\n        id: 9,\n        imgSrc: \"images/신한_신용_후불.webp\",\n        altText: \"신한_신용_후불\",\n        link: \"detail_page_9.html\"\n      }, {\n        id: 10,\n        imgSrc: \"images/신한카드_신용_후불_모바일.webp\",\n        altText: \"신한카드_신용_후불_모바일\",\n        link: \"detail_page_10.html\"\n      }, {\n        id: 11,\n        imgSrc: \"images/신한카드_체크_후불.webp\",\n        altText: \"신한카드_체크_후불\",\n        link: \"detail_page_11.html\"\n      }, {\n        id: 12,\n        imgSrc: \"images/우리카드_신용_후불.webp\",\n        altText: \"우리카드_신용_후불\",\n        link: \"detail_page_12.html\"\n      }, {\n        id: 13,\n        imgSrc: \"images/우리카드_체크_후불.webp\",\n        altText: \"우리카드_체크_후불\",\n        link: \"detail_page_13.html\"\n      }, {\n        id: 14,\n        imgSrc: \"images/이동의즐거움_선불_모바일.png\",\n        imgWidth: \"200px\",\n        altText: \"이동의즐거움_선불_모바일\",\n        link: \"detail_page_14.html\"\n      }, {\n        id: 15,\n        imgSrc: \"images/이동의즐거움_선불.gif\",\n        altText: \"이동의즐거움_선불\",\n        link: \"detail_page_15.html\"\n      }, {\n        id: 16,\n        imgSrc: \"images/카카오페이_선불_모바일.webp\",\n        imgWidth: \"200px\",\n        altText: \"카카오페이_선불_모바일\",\n        link: \"detail_page_16.html\"\n      }, {\n        id: 17,\n        imgSrc: \"images/케이뱅크_체크_후불.webp\",\n        altText: \"케이뱅크_체크_후불\",\n        link: \"detail_page_17.html\"\n      }, {\n        id: 18,\n        imgSrc: \"images/하나_신용_후불.webp\",\n        altText: \"하나_신용_후불\",\n        link: \"detail_page_18.html\"\n      }, {\n        id: 19,\n        imgSrc: \"images/하나카드_체크_후불.webp\",\n        altText: \"하나카드_체크_후불\",\n        link: \"detail_page_19.html\"\n      }, {\n        id: 20,\n        imgSrc: \"images/DGB유페이_선불_모바일.webp\",\n        altText: \"DGB유페이_선불_모바일\",\n        link: \"detail_page_20.html\"\n      }, {\n        id: 21,\n        imgSrc: \"images/DGB유페이_선불_실물.webp\",\n        altText: \"DGB유페이_선불_실물\",\n        link: \"detail_page_21.html\"\n      }, {\n        id: 22,\n        imgSrc: \"images/KB국민카드_신용_후불.webp\",\n        altText: \"KB국민카드_신용_후불\",\n        link: \"detail_page_22.html\"\n      }, {\n        id: 23,\n        imgSrc: \"images/KB국민카드_체크_후불.webp\",\n        altText: \"KB국민카드_체크_후불\",\n        link: \"detail_page_23.html\"\n      }]\n    };\n  },\n  methods: {\n    async geocode(address) {\n      try {\n        console.log('MapView.js >> Geocoding address:', address);\n        const response = await axiosInstance.get('/odsay/geocode/', {\n          params: {\n            address\n          }\n        });\n        console.log('MapView.js >> Geocode response:', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('MapView.js >> Error geocoding address:', error);\n        if (error.response) {\n          console.error('MapView.js >> Error response data:', error.response.data);\n        }\n        throw error;\n      }\n    },\n    async findRoute() {\n      try {\n        console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n\n        // Geocoding 주소를 통해 좌표를 가져오는 부분 (백엔드에서 처리)\n        const startResponse = await this.geocode(this.localStartPoint); // GET 메서드를 사용하도록 수정\n        console.log('MapView.js >> Start geocode response:', startResponse);\n        const endResponse = await this.geocode(this.localEndPoint); // GET 메서드를 사용하도록 수정\n        console.log('MapView.js >> End geocode response:', endResponse);\n        if (!startResponse || !endResponse) {\n          throw new Error('Failed to get coordinates');\n        }\n\n        // startResponse와 endResponse에서 올바르게 데이터를 추출\n        const sx = startResponse.x;\n        const sy = startResponse.y;\n        const ex = endResponse.x;\n        const ey = endResponse.y;\n        console.log('MapView.js >> Start coordinates:', {\n          sx,\n          sy\n        });\n        console.log('MapView.js >> End coordinates:', {\n          ex,\n          ey\n        });\n\n        // ODSAY API를 통해 경로 찾기 요청\n        const odsasApiUrl = `searchPubTransPathT?SX=${sx}&SY=${sy}&EX=${ex}&EY=${ey}&apiKey=${encodeURIComponent(process.env.VUE_APP_ODSAY_API_KEY)}`;\n        console.log('MapView.js >> ODSAY API request URL:', odsasApiUrl); // 요청 URL을 로그에 출력\n\n        const routeResponse = await this.$odsayAxios.get(odsasApiUrl);\n        console.log('MapView.js >> ODSAY API response:', routeResponse.data);\n        if (routeResponse.data && routeResponse.data.result && routeResponse.data.result.path) {\n          this.routes = routeResponse.data.result.path.map(path => {\n            return {\n              totalTime: path.info.totalTime,\n              totalWalk: path.info.totalWalk,\n              busTransitCount: path.info.busTransitCount,\n              subwayTransitCount: path.info.subwayTransitCount,\n              payment: path.info.payment,\n              totalDistance: path.info.totalDistance,\n              firstStartStation: path.subPath[0].startName,\n              startNameKor: path.subPath[0].startName,\n              endName: path.subPath[path.subPath.length - 1].endName,\n              lastEndStation: path.subPath[path.subPath.length - 1].endName,\n              subPaths: path.subPath,\n              mapObj: path.info.mapObj,\n              // mapObj를 여기서 가져옴\n              sx: sx,\n              // 출발 좌표\n              sy: sy,\n              // 출발 좌표\n              ex: ex,\n              // 도착 좌표\n              ey: ey // 도착 좌표\n            };\n          });\n        } else {\n          console.error('MapView.js >> No valid route found');\n        }\n      } catch (error) {\n        console.error('MapView.js >> Error finding route:', error);\n      }\n    },\n    formatTime(minutes) {\n      const hours = Math.floor(minutes / 60);\n      const mins = minutes % 60;\n      return `${hours}시간 ${mins}분`;\n    },\n    getLineClass(trafficType, subwaycode) {\n      if (trafficType === 1) {\n        return 'bus';\n      } else if (trafficType === 2) {\n        return `sub${subwaycode}`;\n      } else {\n        return 'walk';\n      }\n    },\n    getAction(subPath, startName, lane) {\n      if (subPath.trafficType === 1) {\n        return `지하철 ${lane.map(l => l.name).join(', ')} - ${startName}역`;\n      } else if (subPath.trafficType === 2) {\n        return `버스 ${lane.map(l => l.busNo).join(', ')} 번 - ${startName}`;\n      } else {\n        return `도보 - ${startName}`;\n      }\n    }\n  },\n  async mounted() {\n    // this.wsClient = new WebSocketClient('wss://3a145eca76f9.ngrok.app/ws/route/');\n    // this.wsClient.connect();\n    this.initializeMap();\n    await this.findRoute();\n    const ctx = document.getElementById('barChart').getContext('2d');\n    const barChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n          label: 'Sample Data',\n          data: [12, 19, 3, 5, 2, 3, 7],\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  },\n  watch: {\n    startPoint(newStartPoint) {\n      this.localStartPoint = newStartPoint;\n    },\n    endPoint(newEndPoint) {\n      this.localEndPoint = newEndPoint;\n    }\n  }\n};","map":{"version":3,"names":["Chart","axios","getCsrfToken","response","get","withCredentials","console","log","data","csrfToken","error","axiosInstance","create","baseURL","interceptors","request","use","config","token","headers","Promise","reject","props","memHome","String","startPoint","endPoint","memYoungY","Boolean","memYoungN","memSubsidiaryYn","localStartPoint","localEndPoint","routes","wsClient","cards","id","imgSrc","imgWidth","altText","link","imgHeight","methods","geocode","address","params","findRoute","startResponse","endResponse","Error","sx","x","sy","y","ex","ey","odsasApiUrl","encodeURIComponent","process","env","VUE_APP_ODSAY_API_KEY","routeResponse","$odsayAxios","result","path","map","totalTime","info","totalWalk","busTransitCount","subwayTransitCount","payment","totalDistance","firstStartStation","subPath","startName","startNameKor","endName","length","lastEndStation","subPaths","mapObj","formatTime","minutes","hours","Math","floor","mins","getLineClass","trafficType","subwaycode","getAction","lane","l","name","join","busNo","mounted","initializeMap","ctx","document","getElementById","getContext","barChart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","beginAtZero","watch","newStartPoint","newEndPoint"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/CardRecom.js"],"sourcesContent":["import Chart from 'chart.js/auto';\nimport axios from 'axios';\n// import WebSocketClient from '../../utils/WebSocketClient';\n\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n    try {\n        const response = await axios.get('https://d5bf569728f0.ngrok.app/odsay/set-csrf-token/', { withCredentials: true });\n        console.log('MapView.js >> CSRF token received:', response.data);\n        return response.data.csrfToken;\n    } catch (error) {\n        console.error('MapView.js >> Error fetching CSRF token:', error);\n        throw error;  // 에러 발생 시 throw로 전달\n    }\n};\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n    baseURL: 'https://d5bf569728f0.ngrok.app',  // ngrok 도메인 설정\n    withCredentials: true  // 자격 증명 포함\n});\n\naxiosInstance.interceptors.request.use(async (config) => {\n    try {\n        const token = await getCsrfToken();\n        config.headers['X-CSRFToken'] = token;\n        console.log('MapView.js >> CSRF token set in request headers:', token);\n        return config;\n    } catch (error) {\n        console.error('MapView.js >> Failed to set CSRF token in request headers:', error);\n        return Promise.reject(error);  // 에러 발생 시 요청 중단\n    }\n});\n\nexport default {\n    props: {\n        memHome: String,\n        startPoint: String,\n        endPoint: String,\n        memYoungY: Boolean,\n        memYoungN: Boolean,\n        memSubsidiaryYn: Boolean\n    },\n    data() {\n        return {\n            localStartPoint: this.startPoint,\n            localEndPoint: this.endPoint,\n            routes: [],\n            wsClient: null,\n            cards: [\n                { id: 1, imgSrc: \"images/광주은행_신용_후불.jpg\", imgWidth: \"200px\", altText: \"광주은행_신용_후불\", link: \"detail_page_1.html\" },\n                { id: 2, imgSrc: \"images/기업은행_신용_후불.webp\", altText: \"기업은행_신용_후불\", link: \"detail_page_2.html\" },\n                { id: 3, imgSrc: \"images/기업은행_체크_후불.webp\", altText: \"기업은행_신용_후불\", link: \"detail_page_3.html\" },\n                { id: 4, imgSrc: \"images/기후동행카드.webp\", imgWidth: \"300px\", imgHeight: \"300px\", altText: \"기후동행카드\", link: \"detail_page_4.html\" },\n                { id: 5, imgSrc: \"images/농협_체크_후불.webp\", altText: \"농협_체크_후불\", link: \"detail_page_5.html\" },\n                { id: 6, imgSrc: \"images/농협카드_신용_후불.webp\", altText: \"농협카드_신용_후불\", link: \"detail_page_6.html\" },\n                { id: 7, imgSrc: \"images/바로카드_신용_후불.png\", imgWidth: \"200px\", altText: \"바로카드_신용_후불\", link: \"detail_page_7.html\" },\n                { id: 8, imgSrc: \"images/삼성카드_신용_후불.gif\", altText: \"삼성카드_신용_후불\", link: \"detail_page_8.html\" },\n                { id: 9, imgSrc: \"images/신한_신용_후불.webp\", altText: \"신한_신용_후불\", link: \"detail_page_9.html\" },\n                { id: 10, imgSrc: \"images/신한카드_신용_후불_모바일.webp\", altText: \"신한카드_신용_후불_모바일\", link: \"detail_page_10.html\" },\n                { id: 11, imgSrc: \"images/신한카드_체크_후불.webp\", altText: \"신한카드_체크_후불\", link: \"detail_page_11.html\" },\n                { id: 12, imgSrc: \"images/우리카드_신용_후불.webp\", altText: \"우리카드_신용_후불\", link: \"detail_page_12.html\" },\n                { id: 13, imgSrc: \"images/우리카드_체크_후불.webp\", altText: \"우리카드_체크_후불\", link: \"detail_page_13.html\" },\n                { id: 14, imgSrc: \"images/이동의즐거움_선불_모바일.png\", imgWidth: \"200px\", altText: \"이동의즐거움_선불_모바일\", link: \"detail_page_14.html\" },\n                { id: 15, imgSrc: \"images/이동의즐거움_선불.gif\", altText: \"이동의즐거움_선불\", link: \"detail_page_15.html\" },\n                { id: 16, imgSrc: \"images/카카오페이_선불_모바일.webp\", imgWidth: \"200px\", altText: \"카카오페이_선불_모바일\", link: \"detail_page_16.html\" },\n                { id: 17, imgSrc: \"images/케이뱅크_체크_후불.webp\", altText: \"케이뱅크_체크_후불\", link: \"detail_page_17.html\" },\n                { id: 18, imgSrc: \"images/하나_신용_후불.webp\", altText: \"하나_신용_후불\", link: \"detail_page_18.html\" },\n                { id: 19, imgSrc: \"images/하나카드_체크_후불.webp\", altText: \"하나카드_체크_후불\", link: \"detail_page_19.html\" },\n                { id: 20, imgSrc: \"images/DGB유페이_선불_모바일.webp\", altText: \"DGB유페이_선불_모바일\", link: \"detail_page_20.html\" },\n                { id: 21, imgSrc: \"images/DGB유페이_선불_실물.webp\", altText: \"DGB유페이_선불_실물\", link: \"detail_page_21.html\" },\n                { id: 22, imgSrc: \"images/KB국민카드_신용_후불.webp\", altText: \"KB국민카드_신용_후불\", link: \"detail_page_22.html\" },\n                { id: 23, imgSrc: \"images/KB국민카드_체크_후불.webp\", altText: \"KB국민카드_체크_후불\", link: \"detail_page_23.html\" }\n            ],\n        };\n    },\n    methods: {\n        async geocode(address) {\n            try {\n                console.log('MapView.js >> Geocoding address:', address);\n                const response = await axiosInstance.get('/odsay/geocode/', { params: { address } });\n                console.log('MapView.js >> Geocode response:', response.data);\n                return response.data;\n            } catch (error) {\n                console.error('MapView.js >> Error geocoding address:', error);\n                if (error.response) {\n                    console.error('MapView.js >> Error response data:', error.response.data);\n                }\n                throw error;\n            }\n        },\n        \n        async findRoute() {\n            try {\n                console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n                \n                // Geocoding 주소를 통해 좌표를 가져오는 부분 (백엔드에서 처리)\n                const startResponse = await this.geocode(this.localStartPoint);  // GET 메서드를 사용하도록 수정\n                console.log('MapView.js >> Start geocode response:', startResponse);\n                const endResponse = await this.geocode(this.localEndPoint);  // GET 메서드를 사용하도록 수정\n                console.log('MapView.js >> End geocode response:', endResponse);\n                \n                if (!startResponse || !endResponse) {\n                    throw new Error('Failed to get coordinates');\n                }\n\n                // startResponse와 endResponse에서 올바르게 데이터를 추출\n                const sx = startResponse.x;\n                const sy = startResponse.y;\n                const ex = endResponse.x;\n                const ey = endResponse.y;\n                \n                console.log('MapView.js >> Start coordinates:', { sx, sy });\n                console.log('MapView.js >> End coordinates:', { ex, ey });\n                \n                // ODSAY API를 통해 경로 찾기 요청\n                const odsasApiUrl = `searchPubTransPathT?SX=${sx}&SY=${sy}&EX=${ex}&EY=${ey}&apiKey=${encodeURIComponent(process.env.VUE_APP_ODSAY_API_KEY)}`;\n                console.log('MapView.js >> ODSAY API request URL:', odsasApiUrl); // 요청 URL을 로그에 출력\n                \n                const routeResponse = await this.$odsayAxios.get(odsasApiUrl);\n                console.log('MapView.js >> ODSAY API response:', routeResponse.data);\n\n                if (routeResponse.data && routeResponse.data.result && routeResponse.data.result.path) {\n                    this.routes = routeResponse.data.result.path.map((path) => {\n                        return {\n                            totalTime: path.info.totalTime,\n                            totalWalk: path.info.totalWalk,\n                            busTransitCount: path.info.busTransitCount,\n                            subwayTransitCount: path.info.subwayTransitCount,\n                            payment: path.info.payment,\n                            totalDistance: path.info.totalDistance,\n                            firstStartStation: path.subPath[0].startName,\n                            startNameKor: path.subPath[0].startName,\n                            endName: path.subPath[path.subPath.length - 1].endName,\n                            lastEndStation: path.subPath[path.subPath.length - 1].endName,\n                            subPaths: path.subPath,\n                            mapObj: path.info.mapObj,  // mapObj를 여기서 가져옴\n                            sx: sx,  // 출발 좌표\n                            sy: sy,  // 출발 좌표\n                            ex: ex,  // 도착 좌표\n                            ey: ey   // 도착 좌표\n                        };\n                    });\n                } else {\n                    console.error('MapView.js >> No valid route found');\n                }\n            } catch (error) {\n                console.error('MapView.js >> Error finding route:', error);\n            }\n        },\n\n        formatTime(minutes) {\n            const hours = Math.floor(minutes / 60);\n            const mins = minutes % 60;\n            return `${hours}시간 ${mins}분`;\n        },\n\n        getLineClass(trafficType, subwaycode) {\n            if (trafficType === 1) {\n                return 'bus';\n            } else if (trafficType === 2) {\n                return `sub${subwaycode}`;\n            } else {\n                return 'walk';\n            }\n        },\n\n        getAction(subPath, startName, lane) {\n            if (subPath.trafficType === 1) {\n                return `지하철 ${lane.map(l => l.name).join(', ')} - ${startName}역`;\n            } else if (subPath.trafficType === 2) {\n                return `버스 ${lane.map(l => l.busNo).join(', ')} 번 - ${startName}`;\n            } else {\n                return `도보 - ${startName}`;\n            }\n        }\n    },\n\n    async mounted() {\n        // this.wsClient = new WebSocketClient('wss://3a145eca76f9.ngrok.app/ws/route/');\n        // this.wsClient.connect();\n        this.initializeMap();\n        await this.findRoute();\n        const ctx = document.getElementById('barChart').getContext('2d');\n        const barChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [{\n            label: 'Sample Data',\n            data: [12, 19, 3, 5, 2, 3, 7],\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n        }]\n        },\n        options: {\n        scales: {\n            y: {\n            beginAtZero: true\n            }\n        }\n        }\n    });\n    },\n    watch: {\n        startPoint(newStartPoint) {\n            this.localStartPoint = newStartPoint;\n        },\n        endPoint(newEndPoint) {\n            this.localEndPoint = newEndPoint;\n        }\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,eAAe;AACjC,OAAOC,KAAK,MAAM,OAAO;AACzB;;AAGA;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,sDAAsD,EAAE;MAAEC,eAAe,EAAE;IAAK,CAAC,CAAC;IACnHC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,QAAQ,CAACK,IAAI,CAAC;IAChE,OAAOL,QAAQ,CAACK,IAAI,CAACC,SAAS;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,MAAMA,KAAK,CAAC,CAAE;EAClB;AACJ,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGV,KAAK,CAACW,MAAM,CAAC;EAC/BC,OAAO,EAAE,gCAAgC;EAAG;EAC5CR,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;AAEFM,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAOC,MAAM,IAAK;EACrD,IAAI;IACA,MAAMC,KAAK,GAAG,MAAMhB,YAAY,CAAC,CAAC;IAClCe,MAAM,CAACE,OAAO,CAAC,aAAa,CAAC,GAAGD,KAAK;IACrCZ,OAAO,CAACC,GAAG,CAAC,kDAAkD,EAAEW,KAAK,CAAC;IACtE,OAAOD,MAAM;EACjB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZJ,OAAO,CAACI,KAAK,CAAC,4DAA4D,EAAEA,KAAK,CAAC;IAClF,OAAOU,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC,CAAC,CAAE;EACnC;AACJ,CAAC,CAAC;AAEF,eAAe;EACXY,KAAK,EAAE;IACHC,OAAO,EAAEC,MAAM;IACfC,UAAU,EAAED,MAAM;IAClBE,QAAQ,EAAEF,MAAM;IAChBG,SAAS,EAAEC,OAAO;IAClBC,SAAS,EAAED,OAAO;IAClBE,eAAe,EAAEF;EACrB,CAAC;EACDpB,IAAIA,CAAA,EAAG;IACH,OAAO;MACHuB,eAAe,EAAE,IAAI,CAACN,UAAU;MAChCO,aAAa,EAAE,IAAI,CAACN,QAAQ;MAC5BO,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CACH;QAAEC,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,uBAAuB;QAAEC,QAAQ,EAAE,OAAO;QAAEC,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAChH;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC9F;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC9F;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,oBAAoB;QAAEC,QAAQ,EAAE,OAAO;QAAEG,SAAS,EAAE,OAAO;QAAEF,OAAO,EAAE,QAAQ;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC7H;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,sBAAsB;QAAEE,OAAO,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC1F;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC9F;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,uBAAuB;QAAEC,QAAQ,EAAE,OAAO;QAAEC,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAChH;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,uBAAuB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC7F;QAAEJ,EAAE,EAAE,CAAC;QAAEC,MAAM,EAAE,sBAAsB;QAAEE,OAAO,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAqB,CAAC,EAC1F;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,4BAA4B;QAAEE,OAAO,EAAE,gBAAgB;QAAEC,IAAI,EAAE;MAAsB,CAAC,EACxG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAChG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAChG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAChG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,0BAA0B;QAAEC,QAAQ,EAAE,OAAO;QAAEC,OAAO,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAsB,CAAC,EACxH;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,sBAAsB;QAAEE,OAAO,EAAE,WAAW;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAC7F;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,0BAA0B;QAAEC,QAAQ,EAAE,OAAO;QAAEC,OAAO,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAsB,CAAC,EACvH;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAChG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,sBAAsB;QAAEE,OAAO,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAC5F;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,wBAAwB;QAAEE,OAAO,EAAE,YAAY;QAAEC,IAAI,EAAE;MAAsB,CAAC,EAChG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,2BAA2B;QAAEE,OAAO,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAsB,CAAC,EACtG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,0BAA0B;QAAEE,OAAO,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAsB,CAAC,EACpG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,0BAA0B;QAAEE,OAAO,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAsB,CAAC,EACpG;QAAEJ,EAAE,EAAE,EAAE;QAAEC,MAAM,EAAE,0BAA0B;QAAEE,OAAO,EAAE,cAAc;QAAEC,IAAI,EAAE;MAAsB,CAAC;IAE5G,CAAC;EACL,CAAC;EACDE,OAAO,EAAE;IACL,MAAMC,OAAOA,CAACC,OAAO,EAAE;MACnB,IAAI;QACAtC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEqC,OAAO,CAAC;QACxD,MAAMzC,QAAQ,GAAG,MAAMQ,aAAa,CAACP,GAAG,CAAC,iBAAiB,EAAE;UAAEyC,MAAM,EAAE;YAAED;UAAQ;QAAE,CAAC,CAAC;QACpFtC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEJ,QAAQ,CAACK,IAAI,CAAC;QAC7D,OAAOL,QAAQ,CAACK,IAAI;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9D,IAAIA,KAAK,CAACP,QAAQ,EAAE;UAChBG,OAAO,CAACI,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACP,QAAQ,CAACK,IAAI,CAAC;QAC5E;QACA,MAAME,KAAK;MACf;IACJ,CAAC;IAED,MAAMoC,SAASA,CAAA,EAAG;MACd,IAAI;QACAxC,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAE,IAAI,CAACwB,eAAe,EAAE,gBAAgB,EAAE,IAAI,CAACC,aAAa,CAAC;;QAExH;QACA,MAAMe,aAAa,GAAG,MAAM,IAAI,CAACJ,OAAO,CAAC,IAAI,CAACZ,eAAe,CAAC,CAAC,CAAE;QACjEzB,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEwC,aAAa,CAAC;QACnE,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACL,OAAO,CAAC,IAAI,CAACX,aAAa,CAAC,CAAC,CAAE;QAC7D1B,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEyC,WAAW,CAAC;QAE/D,IAAI,CAACD,aAAa,IAAI,CAACC,WAAW,EAAE;UAChC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAChD;;QAEA;QACA,MAAMC,EAAE,GAAGH,aAAa,CAACI,CAAC;QAC1B,MAAMC,EAAE,GAAGL,aAAa,CAACM,CAAC;QAC1B,MAAMC,EAAE,GAAGN,WAAW,CAACG,CAAC;QACxB,MAAMI,EAAE,GAAGP,WAAW,CAACK,CAAC;QAExB/C,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE;UAAE2C,EAAE;UAAEE;QAAG,CAAC,CAAC;QAC3D9C,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE;UAAE+C,EAAE;UAAEC;QAAG,CAAC,CAAC;;QAEzD;QACA,MAAMC,WAAW,GAAG,0BAA0BN,EAAE,OAAOE,EAAE,OAAOE,EAAE,OAAOC,EAAE,WAAWE,kBAAkB,CAACC,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAAC,EAAE;QAC7ItD,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEiD,WAAW,CAAC,CAAC,CAAC;;QAElE,MAAMK,aAAa,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC1D,GAAG,CAACoD,WAAW,CAAC;QAC7DlD,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEsD,aAAa,CAACrD,IAAI,CAAC;QAEpE,IAAIqD,aAAa,CAACrD,IAAI,IAAIqD,aAAa,CAACrD,IAAI,CAACuD,MAAM,IAAIF,aAAa,CAACrD,IAAI,CAACuD,MAAM,CAACC,IAAI,EAAE;UACnF,IAAI,CAAC/B,MAAM,GAAG4B,aAAa,CAACrD,IAAI,CAACuD,MAAM,CAACC,IAAI,CAACC,GAAG,CAAED,IAAI,IAAK;YACvD,OAAO;cACHE,SAAS,EAAEF,IAAI,CAACG,IAAI,CAACD,SAAS;cAC9BE,SAAS,EAAEJ,IAAI,CAACG,IAAI,CAACC,SAAS;cAC9BC,eAAe,EAAEL,IAAI,CAACG,IAAI,CAACE,eAAe;cAC1CC,kBAAkB,EAAEN,IAAI,CAACG,IAAI,CAACG,kBAAkB;cAChDC,OAAO,EAAEP,IAAI,CAACG,IAAI,CAACI,OAAO;cAC1BC,aAAa,EAAER,IAAI,CAACG,IAAI,CAACK,aAAa;cACtCC,iBAAiB,EAAET,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS;cAC5CC,YAAY,EAAEZ,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,SAAS;cACvCE,OAAO,EAAEb,IAAI,CAACU,OAAO,CAACV,IAAI,CAACU,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,CAACD,OAAO;cACtDE,cAAc,EAAEf,IAAI,CAACU,OAAO,CAACV,IAAI,CAACU,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,CAACD,OAAO;cAC7DG,QAAQ,EAAEhB,IAAI,CAACU,OAAO;cACtBO,MAAM,EAAEjB,IAAI,CAACG,IAAI,CAACc,MAAM;cAAG;cAC3B/B,EAAE,EAAEA,EAAE;cAAG;cACTE,EAAE,EAAEA,EAAE;cAAG;cACTE,EAAE,EAAEA,EAAE;cAAG;cACTC,EAAE,EAAEA,EAAE,CAAG;YACb,CAAC;UACL,CAAC,CAAC;QACN,CAAC,MAAM;UACHjD,OAAO,CAACI,KAAK,CAAC,oCAAoC,CAAC;QACvD;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZJ,OAAO,CAACI,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC9D;IACJ,CAAC;IAEDwE,UAAUA,CAACC,OAAO,EAAE;MAChB,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;MACtC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;MACzB,OAAO,GAAGC,KAAK,MAAMG,IAAI,GAAG;IAChC,CAAC;IAEDC,YAAYA,CAACC,WAAW,EAAEC,UAAU,EAAE;MAClC,IAAID,WAAW,KAAK,CAAC,EAAE;QACnB,OAAO,KAAK;MAChB,CAAC,MAAM,IAAIA,WAAW,KAAK,CAAC,EAAE;QAC1B,OAAO,MAAMC,UAAU,EAAE;MAC7B,CAAC,MAAM;QACH,OAAO,MAAM;MACjB;IACJ,CAAC;IAEDC,SAASA,CAACjB,OAAO,EAAEC,SAAS,EAAEiB,IAAI,EAAE;MAChC,IAAIlB,OAAO,CAACe,WAAW,KAAK,CAAC,EAAE;QAC3B,OAAO,OAAOG,IAAI,CAAC3B,GAAG,CAAC4B,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,MAAMpB,SAAS,GAAG;MACpE,CAAC,MAAM,IAAID,OAAO,CAACe,WAAW,KAAK,CAAC,EAAE;QAClC,OAAO,MAAMG,IAAI,CAAC3B,GAAG,CAAC4B,CAAC,IAAIA,CAAC,CAACG,KAAK,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC,QAAQpB,SAAS,EAAE;MACrE,CAAC,MAAM;QACH,OAAO,QAAQA,SAAS,EAAE;MAC9B;IACJ;EACJ,CAAC;EAED,MAAMsB,OAAOA,CAAA,EAAG;IACZ;IACA;IACA,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB,MAAM,IAAI,CAACpD,SAAS,CAAC,CAAC;IACtB,MAAMqD,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;IAChE,MAAMC,QAAQ,GAAG,IAAIvG,KAAK,CAACmG,GAAG,EAAE;MAChCK,IAAI,EAAE,KAAK;MACXhG,IAAI,EAAE;QACNiG,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;QACxEC,QAAQ,EAAE,CAAC;UACPC,KAAK,EAAE,aAAa;UACpBnG,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAC7BoG,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACjB,CAAC;MACD,CAAC;MACDC,OAAO,EAAE;QACTC,MAAM,EAAE;UACJ3D,CAAC,EAAE;YACH4D,WAAW,EAAE;UACb;QACJ;MACA;IACJ,CAAC,CAAC;EACF,CAAC;EACDC,KAAK,EAAE;IACHzF,UAAUA,CAAC0F,aAAa,EAAE;MACtB,IAAI,CAACpF,eAAe,GAAGoF,aAAa;IACxC,CAAC;IACDzF,QAAQA,CAAC0F,WAAW,EAAE;MAClB,IAAI,CAACpF,aAAa,GAAGoF,WAAW;IACpC;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport axios from 'axios';\n\n// Axios 기본 설정\naxios.defaults.withCredentials = true; // withCredentials 설정 추가\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n// API 기본 URL 설정\nconst apiBaseUrl = process.env.VUE_APP_USE_NGROK === 'true' ? process.env.VUE_APP_API_BASE_URL_NGROK : process.env.VUE_APP_API_BASE_URL_LOCAL;\nif (!apiBaseUrl) {\n  console.error('API Base URL is not defined. Check your .env file.');\n} else {\n  console.log(`API Base URL: ${apiBaseUrl}`); // 디버깅용 로그\n}\n\n// CSRF 토큰을 가져와 Axios에 설정\naxios.get(`${apiBaseUrl}/map/set-csrf-token/`).then(response => {\n  console.log('main.js >> CSRF Token response:', response); // 디버깅용 로그\n  axios.defaults.headers.common['X-CSRFToken'] = response.data.csrfToken;\n}).catch(error => {\n  console.error('Error getting CSRF Token: ', error); // 디버깅용 로그\n});\n\n// WebSocket URL 설정\nconst wsProtocol = location.protocol === 'https:' ? 'wss' : 'ws'; // HTTPS일 때 WSS를 사용하도록 설정\nconst wsBaseUrl = process.env.VUE_APP_USE_NGROK === 'true' ? process.env.VUE_APP_WS_BASE_URL_NGROK : process.env.VUE_APP_WS_BASE_URL_LOCAL;\nif (!wsBaseUrl) {\n  console.error('WebSocket Base URL is not defined. Check your .env file.');\n} else {\n  console.log(`WebSocket Base URL: ${wsBaseUrl}`); // 디버깅용 로그\n}\nconst socket = new WebSocket(`${wsProtocol}://${wsBaseUrl}/ws/some_path/`);\nsocket.onopen = () => {\n  console.log('WebSocket connection opened.');\n};\nsocket.onmessage = event => {\n  console.log('WebSocket message received:', event.data);\n};\nsocket.onclose = () => {\n  console.log('WebSocket connection closed.');\n};\nsocket.onerror = error => {\n  console.error('WebSocket error:', error);\n};\n\n// ODSAY API 호출용 Axios 인스턴스 생성 (withCredentials 비활성화)\nconst odsayAxiosInstance = axios.create({\n  baseURL: 'https://api.odsay.com/v1/api/',\n  withCredentials: false // withCredentials 옵션 비활성화\n});\nconst app = createApp(App);\napp.config.globalProperties.$axios = axios;\napp.config.globalProperties.$odsayAxios = odsayAxiosInstance; // ODSAY API 호출용 인스턴스 설정\napp.config.globalProperties.$apiBaseUrl = apiBaseUrl; // apiBaseUrl 전역 속성으로 설정\napp.config.globalProperties.$socket = socket; // WebSocket 전역 속성으로 설정\n\napp.use(router).mount('#app');","map":{"version":3,"names":["createApp","App","router","axios","defaults","withCredentials","xsrfCookieName","xsrfHeaderName","apiBaseUrl","process","env","VUE_APP_USE_NGROK","VUE_APP_API_BASE_URL_NGROK","VUE_APP_API_BASE_URL_LOCAL","console","error","log","get","then","response","headers","common","data","csrfToken","catch","wsProtocol","location","protocol","wsBaseUrl","VUE_APP_WS_BASE_URL_NGROK","VUE_APP_WS_BASE_URL_LOCAL","socket","WebSocket","onopen","onmessage","event","onclose","onerror","odsayAxiosInstance","create","baseURL","app","config","globalProperties","$axios","$odsayAxios","$apiBaseUrl","$socket","use","mount"],"sources":["/Users/parkjiyoung/Desktop/backup/saveus/front/frontend/src/main.js"],"sourcesContent":["import { createApp } from 'vue';\nimport App from './App.vue';\n\nimport router from './router';\nimport axios from 'axios';\n\n// Axios 기본 설정\naxios.defaults.withCredentials = true; // withCredentials 설정 추가\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\n// API 기본 URL 설정\nconst apiBaseUrl = process.env.VUE_APP_USE_NGROK === 'true'\n    ? process.env.VUE_APP_API_BASE_URL_NGROK\n    : process.env.VUE_APP_API_BASE_URL_LOCAL;\n\n    if (!apiBaseUrl) {\n        console.error('API Base URL is not defined. Check your .env file.');\n    } else {\n        console.log(`API Base URL: ${apiBaseUrl}`); // 디버깅용 로그\n    }\n\n// CSRF 토큰을 가져와 Axios에 설정\naxios.get(`${apiBaseUrl}/map/set-csrf-token/`)\n    .then(response => {\n        console.log('main.js >> CSRF Token response:', response); // 디버깅용 로그\n        axios.defaults.headers.common['X-CSRFToken'] = response.data.csrfToken;\n    })\n    .catch(error => {\n        console.error('Error getting CSRF Token: ', error); // 디버깅용 로그\n    });\n\n// WebSocket URL 설정\nconst wsProtocol = location.protocol === 'https:' ? 'wss' : 'ws'; // HTTPS일 때 WSS를 사용하도록 설정\nconst wsBaseUrl = process.env.VUE_APP_USE_NGROK === 'true'\n    ? process.env.VUE_APP_WS_BASE_URL_NGROK\n    : process.env.VUE_APP_WS_BASE_URL_LOCAL;\n\nif (!wsBaseUrl) {\n    console.error('WebSocket Base URL is not defined. Check your .env file.');\n} else {\n    console.log(`WebSocket Base URL: ${wsBaseUrl}`); // 디버깅용 로그\n}\n\nconst socket = new WebSocket(`${wsProtocol}://${wsBaseUrl}/ws/some_path/`);\n\nsocket.onopen = () => {\n    console.log('WebSocket connection opened.');\n};\n\nsocket.onmessage = (event) => {\n    console.log('WebSocket message received:', event.data);\n};\n\nsocket.onclose = () => {\n    console.log('WebSocket connection closed.');\n};\n\nsocket.onerror = (error) => {\n    console.error('WebSocket error:', error);\n};\n\n// ODSAY API 호출용 Axios 인스턴스 생성 (withCredentials 비활성화)\nconst odsayAxiosInstance = axios.create({\n    baseURL: 'https://api.odsay.com/v1/api/',\n    withCredentials: false, // withCredentials 옵션 비활성화\n});\n\nconst app = createApp(App);\napp.config.globalProperties.$axios = axios;\napp.config.globalProperties.$odsayAxios = odsayAxiosInstance; // ODSAY API 호출용 인스턴스 설정\napp.config.globalProperties.$apiBaseUrl = apiBaseUrl; // apiBaseUrl 전역 속성으로 설정\napp.config.globalProperties.$socket = socket; // WebSocket 전역 속성으로 설정\n\napp.use(router).mount('#app');"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
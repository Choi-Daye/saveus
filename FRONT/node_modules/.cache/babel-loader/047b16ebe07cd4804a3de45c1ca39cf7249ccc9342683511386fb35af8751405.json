{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport function handleSignup() {\n  // 비밀번호와 비밀번호 확인 일치 여부 확인\n  if (this.signupData.password !== this.signupData.confirmPassword) {\n    alert('비밀번호가 일치하지 않습니다.');\n    return;\n  }\n\n  // 회원가입 로직 구현 (예: 서버에 회원가입 요청 보내기)\n  console.log('회원가입 시도 중...', this.signupData);\n  // 예시로, ngrok의 백엔드 서버로 회원가입 요청 보내기\n  fetch('https://d5bf569728f0.ngrok.app/api/signup/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(this.signupData)\n  }).then(response => response.json()).then(data => {\n    if (data.success) {\n      console.log('회원가입 성공:', data);\n      // 회원가입 성공 후 동작 (예: 로그인 페이지로 이동)\n      this.$router.push('/login');\n    } else {\n      console.error('회원가입 실패:', data.message);\n      alert('회원가입 실패: ' + data.message);\n    }\n  }).catch(error => {\n    console.error('회원가입 에러:', error);\n    alert('회원가입 에러: ' + error.message);\n  });\n}\nexport function redirectToLogin() {\n  // 로그인 페이지로 리다이렉트\n  console.log('로그인 페이지로 이동');\n  // 실제 구현에서는 라우터를 사용하여 페이지 이동\n  this.$router.push('/login');\n}","map":{"version":3,"names":["handleSignup","signupData","password","confirmPassword","alert","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","data","success","$router","push","error","message","catch","redirectToLogin"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/Signup.js"],"sourcesContent":["export function handleSignup() {\n    // 비밀번호와 비밀번호 확인 일치 여부 확인\n    if (this.signupData.password !== this.signupData.confirmPassword) {\n        alert('비밀번호가 일치하지 않습니다.');\n        return;\n    }\n\n    // 회원가입 로직 구현 (예: 서버에 회원가입 요청 보내기)\n    console.log('회원가입 시도 중...', this.signupData);\n    // 예시로, ngrok의 백엔드 서버로 회원가입 요청 보내기\n    fetch('https://d5bf569728f0.ngrok.app/api/signup/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(this.signupData)\n    })\n    .then(response => response.json())\n    .then(data => {\n        if (data.success) {\n            console.log('회원가입 성공:', data);\n            // 회원가입 성공 후 동작 (예: 로그인 페이지로 이동)\n            this.$router.push('/login');\n        } else {\n            console.error('회원가입 실패:', data.message);\n            alert('회원가입 실패: ' + data.message);\n        }\n    })\n    .catch(error => {\n        console.error('회원가입 에러:', error);\n        alert('회원가입 에러: ' + error.message);\n    });\n}\n\nexport function redirectToLogin() {\n    // 로그인 페이지로 리다이렉트\n    console.log('로그인 페이지로 이동');\n    // 실제 구현에서는 라우터를 사용하여 페이지 이동\n    this.$router.push('/login');\n}\n"],"mappings":";AAAA,OAAO,SAASA,YAAYA,CAAA,EAAG;EAC3B;EACA,IAAI,IAAI,CAACC,UAAU,CAACC,QAAQ,KAAK,IAAI,CAACD,UAAU,CAACE,eAAe,EAAE;IAC9DC,KAAK,CAAC,kBAAkB,CAAC;IACzB;EACJ;;EAEA;EACAC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACL,UAAU,CAAC;EAC5C;EACAM,KAAK,CAAC,4CAA4C,EAAE;IAChDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACX,UAAU;EACxC,CAAC,CAAC,CACDY,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;IACV,IAAIA,IAAI,CAACC,OAAO,EAAE;MACdZ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEU,IAAI,CAAC;MAC7B;MACA,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC,MAAM;MACHd,OAAO,CAACe,KAAK,CAAC,UAAU,EAAEJ,IAAI,CAACK,OAAO,CAAC;MACvCjB,KAAK,CAAC,WAAW,GAAGY,IAAI,CAACK,OAAO,CAAC;IACrC;EACJ,CAAC,CAAC,CACDC,KAAK,CAACF,KAAK,IAAI;IACZf,OAAO,CAACe,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChChB,KAAK,CAAC,WAAW,GAAGgB,KAAK,CAACC,OAAO,CAAC;EACtC,CAAC,CAAC;AACN;AAEA,OAAO,SAASE,eAAeA,CAAA,EAAG;EAC9B;EACAlB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC1B;EACA,IAAI,CAACY,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatBot',\n  inject: ['selectedPayment'],\n  // 추가된 부분\n  data() {\n    return {\n      messages: [],\n      userInput: ''\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.userInput.trim() !== '') {\n        this.messages.push({\n          sender: 'user',\n          text: this.userInput\n        });\n        const userMessage = this.userInput;\n        this.userInput = '';\n        this.getBotResponse(userMessage);\n      }\n    },\n    async getBotResponse(message) {\n      let botResponse = '';\n      const payment = this.selectedPayment();\n      if (payment && message.toLowerCase().includes('경로')) {\n        const {\n          minValue,\n          maxValue\n        } = await this.calculateCost(payment);\n        botResponse = `현재 선택한 경로의 값은 ${payment}이며, 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${minValue}, 최대 ${maxValue} 값을 지불하게 됩니다.`;\n      } else if (message.toLowerCase().includes('안녕하세요')) {\n        botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n      } else if (message.toLowerCase().includes('도움')) {\n        botResponse = '물론이죠, 무엇을 도와드릴까요?';\n      } else {\n        botResponse = '이것은 봇의 응답입니다.';\n      }\n      this.messages.push({\n        sender: 'bot',\n        text: botResponse\n      });\n      this.scrollToEnd();\n    },\n    scrollToEnd() {\n      const chatWindow = this.$el.querySelector('.chat-window');\n      chatWindow.scrollTop = chatWindow.scrollHeight;\n    },\n    async calculateCost(payment) {\n      try {\n        const response = await fetch(`/calculate/calculate-cost/?payment=${payment}`);\n        const data = await response.json();\n        return data;\n      } catch (error) {\n        console.error('Error calculating cost:', error);\n        return {\n          minValue: 0,\n          maxValue: 0\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","inject","data","messages","userInput","methods","sendMessage","trim","push","sender","text","userMessage","getBotResponse","message","botResponse","payment","selectedPayment","toLowerCase","includes","minValue","maxValue","calculateCost","scrollToEnd","chatWindow","$el","querySelector","scrollTop","scrollHeight","response","fetch","json","error","console"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/views/ChatBot.vue"],"sourcesContent":["<template>\n    <div class=\"chatbot\">\n        <div class=\"chat-window\">\n            <!-- 채팅 메시지가 여기에 나타납니다 -->\n            <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-message\">\n            <div :class=\"['message', message.sender]\">{{ message.text }}</div>\n            </div>\n        </div>\n        <div class=\"message-input\">\n            <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"질문을 입력하세요\" />\n            <button @click=\"sendMessage\">전송</button>\n        </div>\n    </div>\n</template>\n    \n<script>\nexport default {\n    name: 'ChatBot',\n    inject: ['selectedPayment'], // 추가된 부분\n    data() {\n    return {\n        messages: [],\n        userInput: ''\n    };\n    },\n    methods: {\n        sendMessage() {\n            if (this.userInput.trim() !== '') {\n            this.messages.push({ sender: 'user', text: this.userInput });\n            const userMessage = this.userInput;\n            this.userInput = '';\n            this.getBotResponse(userMessage);\n            }\n        },\n        async getBotResponse(message) {\n            let botResponse = '';\n            const payment = this.selectedPayment();\n            if (payment && message.toLowerCase().includes('경로')) {\n            const { minValue, maxValue } = await this.calculateCost(payment);\n            botResponse = `현재 선택한 경로의 값은 ${payment}이며, 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${minValue}, 최대 ${maxValue} 값을 지불하게 됩니다.`;\n            } else if (message.toLowerCase().includes('안녕하세요')) {\n            botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n            } else if (message.toLowerCase().includes('도움')) {\n            botResponse = '물론이죠, 무엇을 도와드릴까요?';\n            } else {\n            botResponse = '이것은 봇의 응답입니다.';\n            }\n            this.messages.push({ sender: 'bot', text: botResponse });\n            this.scrollToEnd();\n        },\n        scrollToEnd() {\n            const chatWindow = this.$el.querySelector('.chat-window');\n            chatWindow.scrollTop = chatWindow.scrollHeight;\n        },\n        async calculateCost(payment) {\n            try {\n            const response = await fetch(`/calculate/calculate-cost/?payment=${payment}`);\n            const data = await response.json();\n            return data;\n            } catch (error) {\n            console.error('Error calculating cost:', error);\n            return { minValue: 0, maxValue: 0 };\n            }\n        }\n    }\n};\n</script>\n    \n    <style scoped src=\"../assets/css/ChatBot.css\"></style>\n    "],"mappings":";AAgBA,eAAe;EACXA,IAAI,EAAE,SAAS;EACfC,MAAM,EAAE,CAAC,iBAAiB,CAAC;EAAE;EAC7BC,IAAIA,CAAA,EAAG;IACP,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACf,CAAC;EACD,CAAC;EACDC,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV,IAAI,IAAI,CAACF,SAAS,CAACG,IAAI,CAAC,MAAM,EAAE,EAAE;QAClC,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAAC;UAAEC,MAAM,EAAE,MAAM;UAAEC,IAAI,EAAE,IAAI,CAACN;QAAU,CAAC,CAAC;QAC5D,MAAMO,WAAU,GAAI,IAAI,CAACP,SAAS;QAClC,IAAI,CAACA,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACQ,cAAc,CAACD,WAAW,CAAC;MAChC;IACJ,CAAC;IACD,MAAMC,cAAcA,CAACC,OAAO,EAAE;MAC1B,IAAIC,WAAU,GAAI,EAAE;MACpB,MAAMC,OAAM,GAAI,IAAI,CAACC,eAAe,CAAC,CAAC;MACtC,IAAID,OAAM,IAAKF,OAAO,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACrD,MAAM;UAAEC,QAAQ;UAAEC;QAAS,IAAI,MAAM,IAAI,CAACC,aAAa,CAACN,OAAO,CAAC;QAChED,WAAU,GAAI,iBAAiBC,OAAO,oCAAoCI,QAAQ,QAAQC,QAAQ,eAAe;MACjH,OAAO,IAAIP,OAAO,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACpDJ,WAAU,GAAI,oBAAoB;MAClC,OAAO,IAAID,OAAO,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACjDJ,WAAU,GAAI,mBAAmB;MACjC,OAAO;QACPA,WAAU,GAAI,eAAe;MAC7B;MACA,IAAI,CAACX,QAAQ,CAACK,IAAI,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEI;MAAY,CAAC,CAAC;MACxD,IAAI,CAACQ,WAAW,CAAC,CAAC;IACtB,CAAC;IACDA,WAAWA,CAAA,EAAG;MACV,MAAMC,UAAS,GAAI,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,cAAc,CAAC;MACzDF,UAAU,CAACG,SAAQ,GAAIH,UAAU,CAACI,YAAY;IAClD,CAAC;IACD,MAAMN,aAAaA,CAACN,OAAO,EAAE;MACzB,IAAI;QACJ,MAAMa,QAAO,GAAI,MAAMC,KAAK,CAAC,sCAAsCd,OAAO,EAAE,CAAC;QAC7E,MAAMb,IAAG,GAAI,MAAM0B,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,OAAO5B,IAAI;MACX,EAAE,OAAO6B,KAAK,EAAE;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,OAAO;UAAEZ,QAAQ,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAE,CAAC;MACnC;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
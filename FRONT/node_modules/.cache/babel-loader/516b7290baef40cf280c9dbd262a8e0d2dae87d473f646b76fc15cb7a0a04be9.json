{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatBot',\n  props: ['selectedPayment'],\n  data() {\n    return {\n      messages: [],\n      userInput: ''\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.userInput.trim() !== '') {\n        this.messages.push({\n          sender: 'user',\n          text: this.userInput\n        });\n        this.userInput = '';\n        this.getBotResponse(this.userInput);\n      }\n    },\n    getBotResponse(message) {\n      let botResponse = '이것은 봇의 응답입니다.';\n      if (message.toLowerCase().includes('안녕하세요')) {\n        botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n      } else if (message.toLowerCase().includes('도움')) {\n        botResponse = '물론이죠, 무엇을 도와드릴까요?';\n      }\n      this.messages.push({\n        sender: 'bot',\n        text: botResponse\n      });\n      this.scrollToEnd();\n    },\n    formatNumber(value) {\n      return value.toLocaleString();\n    },\n    async calculateCost(payment) {\n      try {\n        const response = await fetch(`https://api.example.com/calculate/cost?payment=${payment}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n      } catch (error) {\n        console.error('Error calculating cost:', error);\n        return {\n          minValue: 0,\n          maxValue: 0\n        };\n      }\n    },\n    async handleRouteClickPayment(payment) {\n      try {\n        const {\n          minValue,\n          maxValue\n        } = await this.calculateCost(payment);\n        const botResponse = `현재 선택한 경로의 편도 교통비는 ${this.formatNumber(payment)}원 입니다. \\n 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${this.formatNumber(minValue)}원, 최대 ${this.formatNumber(maxValue)}원을 지불하게 됩니다.`;\n        this.messages.push({\n          sender: 'bot',\n          text: botResponse\n        });\n        this.scrollToEnd();\n      } catch (error) {\n        console.error(\"Error in handleRouteClickPayment:\", error);\n      }\n    },\n    scrollToEnd() {\n      const chatWindow = this.$el.querySelector('.chat-window');\n      chatWindow.scrollTop = chatWindow.scrollHeight;\n    }\n  }\n};","map":{"version":3,"names":["name","props","data","messages","userInput","methods","sendMessage","trim","push","sender","text","getBotResponse","message","botResponse","toLowerCase","includes","scrollToEnd","formatNumber","value","toLocaleString","calculateCost","payment","response","fetch","ok","Error","status","json","error","console","minValue","maxValue","handleRouteClickPayment","chatWindow","$el","querySelector","scrollTop","scrollHeight"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/views/ChatBot.vue"],"sourcesContent":["<template>\n    <div class=\"chatbot\">\n        <div class=\"chat-window\">\n            <!-- 채팅 메시지가 여기에 나타납니다 -->\n            <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-message\">\n                <template v-for=\"(line, lineIndex) in message.text.split('\\n')\" :key=\"`${index}-${lineIndex}`\">\n                    <div :class=\"['message', message.sender]\">\n                        {{ line }}\n                    </div>\n                    <br v-if=\"lineIndex < message.text.split('\\n').length - 1\">\n                </template>\n            </div>\n        </div>\n        <div class=\"message-input\">\n            <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"질문을 입력하세요\" />\n            <button @click=\"sendMessage\">전송</button>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'ChatBot',\n    props: ['selectedPayment'],\n    data() {\n        return {\n            messages: [],\n            userInput: ''\n        };\n    },\n    methods: {\n        sendMessage() {\n            if (this.userInput.trim() !== '') {\n                this.messages.push({ sender: 'user', text: this.userInput });\n                this.userInput = '';\n                this.getBotResponse(this.userInput);\n            }\n        },\n        getBotResponse(message) {\n            let botResponse = '이것은 봇의 응답입니다.';\n            if (message.toLowerCase().includes('안녕하세요')) {\n                botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n            } else if (message.toLowerCase().includes('도움')) {\n                botResponse = '물론이죠, 무엇을 도와드릴까요?';\n            }\n            this.messages.push({ sender: 'bot', text: botResponse });\n            this.scrollToEnd();\n        },\n        formatNumber(value) {\n            return value.toLocaleString();\n        },\n        async calculateCost(payment) {\n            try {\n                const response = await fetch(`https://api.example.com/calculate/cost?payment=${payment}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return await response.json();\n            } catch (error) {\n                console.error('Error calculating cost:', error);\n                return { minValue: 0, maxValue: 0 };\n            }\n        },\n        async handleRouteClickPayment(payment) {\n            try {\n                const { minValue, maxValue } = await this.calculateCost(payment);\n                const botResponse = `현재 선택한 경로의 편도 교통비는 ${this.formatNumber(payment)}원 입니다. \\n 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${this.formatNumber(minValue)}원, 최대 ${this.formatNumber(maxValue)}원을 지불하게 됩니다.`;\n                this.messages.push({ sender: 'bot', text: botResponse });\n                this.scrollToEnd();\n            } catch ( error) {\n                console.error(\"Error in handleRouteClickPayment:\", error);\n            }\n        },\n        scrollToEnd() {\n            const chatWindow = this.$el.querySelector('.chat-window');\n            chatWindow.scrollTop = chatWindow.scrollHeight;\n        }\n    }\n};\n</script>\n\n<style scoped src=\"../assets/css/ChatBot.css\"></style>\n"],"mappings":";AAqBA,eAAe;EACXA,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,CAAC,iBAAiB,CAAC;EAC1BC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACf,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV,IAAI,IAAI,CAACF,SAAS,CAACG,IAAI,CAAC,MAAM,EAAE,EAAE;QAC9B,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAAC;UAAEC,MAAM,EAAE,MAAM;UAAEC,IAAI,EAAE,IAAI,CAACN;QAAU,CAAC,CAAC;QAC5D,IAAI,CAACA,SAAQ,GAAI,EAAE;QACnB,IAAI,CAACO,cAAc,CAAC,IAAI,CAACP,SAAS,CAAC;MACvC;IACJ,CAAC;IACDO,cAAcA,CAACC,OAAO,EAAE;MACpB,IAAIC,WAAU,GAAI,eAAe;MACjC,IAAID,OAAO,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACzCF,WAAU,GAAI,oBAAoB;MACtC,OAAO,IAAID,OAAO,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC7CF,WAAU,GAAI,mBAAmB;MACrC;MACA,IAAI,CAACV,QAAQ,CAACK,IAAI,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEG;MAAY,CAAC,CAAC;MACxD,IAAI,CAACG,WAAW,CAAC,CAAC;IACtB,CAAC;IACDC,YAAYA,CAACC,KAAK,EAAE;MAChB,OAAOA,KAAK,CAACC,cAAc,CAAC,CAAC;IACjC,CAAC;IACD,MAAMC,aAAaA,CAACC,OAAO,EAAE;MACzB,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,kDAAkDF,OAAO,EAAE,CAAC;QACzF,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC7D;QACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAChC,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,OAAO;UAAEE,QAAQ,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAE,CAAC;MACvC;IACJ,CAAC;IACD,MAAMC,uBAAuBA,CAACX,OAAO,EAAE;MACnC,IAAI;QACA,MAAM;UAAES,QAAQ;UAAEC;QAAS,IAAI,MAAM,IAAI,CAACX,aAAa,CAACC,OAAO,CAAC;QAChE,MAAMR,WAAU,GAAI,sBAAsB,IAAI,CAACI,YAAY,CAACI,OAAO,CAAC,0CAA0C,IAAI,CAACJ,YAAY,CAACa,QAAQ,CAAC,SAAS,IAAI,CAACb,YAAY,CAACc,QAAQ,CAAC,cAAc;QAC3L,IAAI,CAAC5B,QAAQ,CAACK,IAAI,CAAC;UAAEC,MAAM,EAAE,KAAK;UAAEC,IAAI,EAAEG;QAAY,CAAC,CAAC;QACxD,IAAI,CAACG,WAAW,CAAC,CAAC;MACtB,EAAE,OAAQY,KAAK,EAAE;QACbC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC7D;IACJ,CAAC;IACDZ,WAAWA,CAAA,EAAG;MACV,MAAMiB,UAAS,GAAI,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,cAAc,CAAC;MACzDF,UAAU,CAACG,SAAQ,GAAIH,UAAU,CAACI,YAAY;IAClD;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
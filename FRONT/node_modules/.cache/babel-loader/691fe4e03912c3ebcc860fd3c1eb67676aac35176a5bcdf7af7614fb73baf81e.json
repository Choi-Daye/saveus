{"ast":null,"code":"import axios from 'axios';\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n  try {\n    const response = await axios.get('https://d4182847ec99.ngrok.app/odsay/set-csrf-token/', {\n      withCredentials: true\n    });\n    console.log('MapView.js >> CSRF token received:', response.data);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('MapView.js >> Error fetching CSRF token:', error);\n  }\n};\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n  baseURL: 'https://d4182847ec99.ngrok.app',\n  // ngrok 도메인 설정\n  withCredentials: true // 자격 증명 포함\n});\naxiosInstance.interceptors.request.use(async config => {\n  const token = await getCsrfToken();\n  config.headers['X-CSRFToken'] = token;\n  console.log('MapView.js >> CSRF token set in request headers:', token);\n  return config;\n});\nexport default {\n  props: {\n    memHome: String,\n    startPoint: String,\n    endPoint: String,\n    memYoungY: Boolean,\n    memYoungN: Boolean,\n    memSubsidiaryYn: Boolean\n  },\n  data() {\n    return {\n      localStartPoint: this.startPoint,\n      localEndPoint: this.endPoint,\n      routes: []\n    };\n  },\n  methods: {\n    async findRoute() {\n      try {\n        console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n        const response = await axiosInstance.post(baseURL + '/odsay/find-route/', {\n          startPoint: this.localStartPoint,\n          endPoint: this.localEndPoint\n        });\n        console.log('API response:', response.data); // API 응답을 콘솔에 출력합니다.\n\n        if (response.data && response.data.result && response.data.result.path) {\n          this.routes = response.data.result.path;\n        } else {\n          console.error('MapView.js >> Unexpected API response format:', response.data);\n          this.routes = []; // 데이터가 없을 경우 빈 배열로 초기화합니다.\n        }\n      } catch (error) {\n        console.error('MapView.js >> Error finding route:', error);\n        if (error.response) {\n          console.error('MapView.js >> Error response data:', error.response.data);\n        }\n      }\n    },\n    formatTime(minutes) {\n      const hours = Math.floor(minutes / 60);\n      const mins = minutes % 60;\n      return `${hours}시간 ${mins}분`;\n    },\n    getLineClass(trafficType, subwaycode) {\n      if (trafficType === 1) {\n        return 'bus';\n      } else if (trafficType === 2) {\n        return `sub${subwaycode}`;\n      } else {\n        return 'walk';\n      }\n    },\n    getAction(subPath) {\n      if (subPath.trafficType === 1) {\n        return '승차';\n      } else if (subPath.trafficType === 2) {\n        return '환승';\n      } else {\n        return '도보';\n      }\n    },\n    initializeMap() {\n      if (window.naver) {\n        var mapOptions = {\n          center: new naver.maps.LatLng(37.5665, 126.9780),\n          zoom: 10\n        };\n        this.map = new naver.maps.Map('map', mapOptions);\n      } else {\n        console.error('Naver Maps API is not loaded.');\n      }\n    }\n  },\n  async mounted() {\n    this.initializeMap();\n  }\n};","map":{"version":3,"names":["axios","getCsrfToken","response","get","withCredentials","console","log","data","csrfToken","error","axiosInstance","create","baseURL","interceptors","request","use","config","token","headers","props","memHome","String","startPoint","endPoint","memYoungY","Boolean","memYoungN","memSubsidiaryYn","localStartPoint","localEndPoint","routes","methods","findRoute","post","result","path","formatTime","minutes","hours","Math","floor","mins","getLineClass","trafficType","subwaycode","getAction","subPath","initializeMap","window","naver","mapOptions","center","maps","LatLng","zoom","map","Map","mounted"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/MapView.js"],"sourcesContent":["import axios from 'axios';\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n    try {\n        const response = await axios.get('https://d4182847ec99.ngrok.app/odsay/set-csrf-token/', { withCredentials: true });\n        console.log('MapView.js >> CSRF token received:', response.data);\n        return response.data.csrfToken;\n    } catch (error) {\n        console.error('MapView.js >> Error fetching CSRF token:', error);\n    }\n};\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n    baseURL: 'https://d4182847ec99.ngrok.app',  // ngrok 도메인 설정\n    withCredentials: true  // 자격 증명 포함\n});\n\naxiosInstance.interceptors.request.use(async (config) => {\n    const token = await getCsrfToken();\n    config.headers['X-CSRFToken'] = token;\n    console.log('MapView.js >> CSRF token set in request headers:', token);\n    return config;\n});\n\n\nexport default {\n    props: {\n        memHome: String,\n        startPoint: String,\n        endPoint: String,\n        memYoungY: Boolean,\n        memYoungN: Boolean,\n        memSubsidiaryYn: Boolean\n    },\n    data() {\n        return {\n            localStartPoint: this.startPoint,\n            localEndPoint: this.endPoint,\n            routes: []\n        };\n    },\n    methods: {\n        async findRoute() {\n            try {\n                console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n                const response = await axiosInstance.post(baseURL + '/odsay/find-route/', {\n                    startPoint: this.localStartPoint,\n                    endPoint: this.localEndPoint\n                });\n    \n                console.log('API response:', response.data); // API 응답을 콘솔에 출력합니다.\n    \n                if (response.data && response.data.result && response.data.result.path) {\n                    this.routes = response.data.result.path;\n                } else {\n                    console.error('MapView.js >> Unexpected API response format:', response.data);\n                    this.routes = []; // 데이터가 없을 경우 빈 배열로 초기화합니다.\n                }\n            } catch (error) {\n                console.error('MapView.js >> Error finding route:', error);\n                if (error.response) {\n                    console.error('MapView.js >> Error response data:', error.response.data);\n                }\n            }\n        },\n        formatTime(minutes) {\n            const hours = Math.floor(minutes / 60);\n            const mins = minutes % 60;\n            return `${hours}시간 ${mins}분`;\n        },\n        getLineClass(trafficType, subwaycode) {\n            if (trafficType === 1) {\n                return 'bus';\n            } else if (trafficType === 2) {\n                return `sub${subwaycode}`;\n            } else {\n                return 'walk';\n            }\n        },\n        getAction(subPath) {\n            if (subPath.trafficType === 1) {\n                return '승차';\n            } else if (subPath.trafficType === 2) {\n                return '환승';\n            } else {\n                return '도보';\n            }\n        },\n        initializeMap() {\n            if (window.naver) {\n                var mapOptions = {\n                    center: new naver.maps.LatLng(37.5665, 126.9780),\n                    zoom: 10\n                };\n                this.map = new naver.maps.Map('map', mapOptions);\n            } else {\n                console.error('Naver Maps API is not loaded.');\n            }\n        }\n    },\n    async mounted() {\n        this.initializeMap();\n    },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
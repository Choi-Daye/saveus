{"ast":null,"code":"import axios from 'axios';\nimport { redirectToNaverLogin } from '../assets/js/login.js';\nimport MapView from '../../components/MapView.vue';\n\n// CSRF 토큰 설정\naxios.defaults.withCredentials = true;\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nexport default {\n  mixins: [mainOne],\n  components: {\n    MapView\n  },\n  methods: {\n    redirectToNaverLogin\n  },\n  data() {\n    return {\n      showMapApi: false,\n      showCheckButton: false,\n      inputs: {\n        mem_home: '',\n        start_point: '',\n        end_point: '',\n        mem_young_y: false,\n        mem_young_n: false,\n        mem_subsidiary_yn: false\n      },\n      formData: {\n        mem_home: '',\n        start_point: '',\n        end_point: '',\n        mem_young_y: false,\n        mem_young_n: false,\n        mem_subsidiary_yn: false\n      },\n      csrfToken: getCookie('csrftoken')\n    };\n  },\n  methods: {\n    async getCsrfToken() {\n      const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n      console.log('mainone.js API Base URL:', apiBaseUrl);\n      try {\n        const response = await axios.get(`${apiBaseUrl}/map/set-csrf-token/`, {\n          withCredentials: true\n        });\n        console.log('mainone.js CSRF token set successfully.');\n        console.log('mainone.js Response data:', response.data);\n\n        // 직접 CSRF 토큰을 설정합니다.\n        const csrfToken = response.data.csrfToken;\n        this.csrfToken = csrfToken;\n\n        // 쿠키에서도 CSRF 토큰을 가져옵니다.\n        const cookieCsrfToken = getCookie('csrftoken');\n        console.log('mainone.js Retrieved CSRF token from cookie:', cookieCsrfToken);\n        this.csrfToken = cookieCsrfToken || csrfToken;\n        console.log('mainone.js CSRF 토큰:', this.csrfToken);\n        return this.csrfToken;\n      } catch (error) {\n        console.error('mainone.js Error setting CSRF token:', error);\n        throw error;\n      }\n    },\n    handleCheckboxChange(field) {\n      if (field === 'mem_young_y') {\n        this.inputs.mem_young_y = true;\n        this.inputs.mem_young_n = false;\n      } else if (field === 'mem_young_n') {\n        this.inputs.mem_young_y = false;\n        this.inputs.mem_young_n = true;\n      }\n    },\n    async handleSubmit(event) {\n      event.preventDefault();\n      await this.checkInputs();\n    },\n    async checkInputs() {\n      try {\n        if (!this.csrfToken) {\n          await this.getCsrfToken(); // CSRF 토큰을 먼저 가져옵니다.\n        }\n        this.formData = {\n          ...this.inputs\n        };\n        const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n        console.log('mainone.js API Base URL:', apiBaseUrl);\n        console.log('mainone.js CSRF Token:', this.csrfToken);\n        console.log('mainone.js Inputs:', this.inputs);\n        const response = await axios.post(`${apiBaseUrl}/map/api/data/`, {\n          mem_home: this.inputs.mem_home,\n          start_point: this.inputs.start_point,\n          end_point: this.inputs.end_point,\n          mem_young_y: this.inputs.mem_young_y,\n          mem_young_n: this.inputs.mem_young_n,\n          mem_subsidiary_yn: this.inputs.mem_subsidiary_yn\n        }, {\n          headers: {\n            'X-CSRFToken': this.csrfToken,\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true\n        });\n        console.log('mainone.js Response:', response.data);\n\n        // 성공적으로 데이터를 받았을 때 showMapApi를 true로 설정하여 MapView 컴포넌트를 표시\n        this.showMapApi = true;\n        this.showCheckButton = true;\n      } catch (error) {\n        console.error('mainone.js Error:', error);\n      }\n    }\n  },\n  mounted() {\n    this.getCsrfToken();\n  }\n};","map":{"version":3,"names":["axios","redirectToNaverLogin","MapView","defaults","withCredentials","xsrfCookieName","xsrfHeaderName","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","mixins","mainOne","components","methods","data","showMapApi","showCheckButton","inputs","mem_home","start_point","end_point","mem_young_y","mem_young_n","mem_subsidiary_yn","formData","csrfToken","getCsrfToken","apiBaseUrl","process","env","VUE_APP_API_BASE_URL","console","log","response","get","cookieCsrfToken","error","handleCheckboxChange","field","handleSubmit","event","preventDefault","checkInputs","post","headers","mounted"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/MainOne.js"],"sourcesContent":["import axios from 'axios';\nimport { redirectToNaverLogin } from '../assets/js/login.js';\nimport MapView from '../../components/MapView.vue';\n\n// CSRF 토큰 설정\naxios.defaults.withCredentials = true;\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport default {\n    mixins: [mainOne],\n    components: {\n        MapView\n    },\n    methods: {\n        redirectToNaverLogin,\n    },\n    data() {\n        return {\n            showMapApi: false,\n            showCheckButton: false,\n            inputs: {\n                mem_home: '',\n                start_point: '',\n                end_point: '',\n                mem_young_y: false,\n                mem_young_n: false,\n                mem_subsidiary_yn: false\n            },\n            formData: {\n                mem_home: '',\n                start_point: '',\n                end_point: '',\n                mem_young_y: false,\n                mem_young_n: false,\n                mem_subsidiary_yn: false\n            },\n            csrfToken: getCookie('csrftoken')\n        };\n    },\n    methods: {\n        async getCsrfToken() {\n            const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n            console.log('mainone.js API Base URL:', apiBaseUrl);\n            try {\n                const response = await axios.get(`${apiBaseUrl}/map/set-csrf-token/`, { withCredentials: true });\n                console.log('mainone.js CSRF token set successfully.');\n                console.log('mainone.js Response data:', response.data);\n                \n                // 직접 CSRF 토큰을 설정합니다.\n                const csrfToken = response.data.csrfToken;\n                this.csrfToken = csrfToken;\n\n                // 쿠키에서도 CSRF 토큰을 가져옵니다.\n                const cookieCsrfToken = getCookie('csrftoken');\n                console.log('mainone.js Retrieved CSRF token from cookie:', cookieCsrfToken);\n                this.csrfToken = cookieCsrfToken || csrfToken;\n\n                console.log('mainone.js CSRF 토큰:', this.csrfToken);\n                return this.csrfToken;\n            } catch (error) {\n                console.error('mainone.js Error setting CSRF token:', error);\n                throw error;\n            }\n        },\n\n\n        handleCheckboxChange(field) {\n            if (field === 'mem_young_y') {\n                this.inputs.mem_young_y = true;\n                this.inputs.mem_young_n = false;\n            } else if (field === 'mem_young_n') {\n                this.inputs.mem_young_y = false;\n                this.inputs.mem_young_n = true;\n            }\n        },\n\n        async handleSubmit(event) {\n            event.preventDefault();\n            await this.checkInputs();\n        },\n\n        async checkInputs() {\n            try {\n\n                if (!this.csrfToken) {\n                    await this.getCsrfToken(); // CSRF 토큰을 먼저 가져옵니다.\n                }\n\n                this.formData = { ...this.inputs };\n\n                const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n                console.log('mainone.js API Base URL:', apiBaseUrl);\n                console.log('mainone.js CSRF Token:', this.csrfToken);\n                console.log('mainone.js Inputs:', this.inputs);\n\n                const response = await axios.post(\n                    `${apiBaseUrl}/map/api/data/`,\n                    {\n                        mem_home: this.inputs.mem_home,\n                        start_point: this.inputs.start_point,\n                        end_point: this.inputs.end_point,\n                        mem_young_y: this.inputs.mem_young_y,\n                        mem_young_n: this.inputs.mem_young_n,\n                        mem_subsidiary_yn: this.inputs.mem_subsidiary_yn\n                    },\n                    {\n                        headers: {\n                            'X-CSRFToken': this.csrfToken,\n                            'Content-Type': 'application/json'\n                        },\n                        withCredentials: true\n                    }\n                );\n\n                console.log('mainone.js Response:', response.data);\n\n                // 성공적으로 데이터를 받았을 때 showMapApi를 true로 설정하여 MapView 컴포넌트를 표시\n                this.showMapApi = true;\n                this.showCheckButton = true;\n            } catch (error) {\n                console.error('mainone.js Error:', error);\n            }\n        }\n    },\n    mounted() {\n        this.getCsrfToken();\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\nexport default {\n  props: {\n    memHome: String,\n    startPoint: String,\n    endPoint: String,\n    memYoungY: Boolean,\n    memYoungN: Boolean,\n    memSubsidiaryYn: Boolean\n  },\n  data() {\n    return {\n      localStartPoint: this.startPoint,\n      localEndPoint: this.endPoint,\n      routeInfo: {\n        start: '',\n        end: '',\n        distance: '',\n        duration: ''\n      },\n      map: null,\n      csrfToken: getCookie('csrftoken')\n    };\n  },\n  methods: {\n    async findRoute() {\n      try {\n        const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n        console.log('Sending request to find route with data:', {\n          startPoint: this.localStartPoint,\n          endPoint: this.localEndPoint\n        });\n        const response = await axios.post(`${apiBaseUrl}/odsay/find-route/`, {\n          startPoint: this.localStartPoint,\n          endPoint: this.localEndPoint\n        }, {\n          headers: {\n            'X-CSRFToken': this.csrfToken\n          }\n        });\n        this.routeInfo = response.data;\n        console.log('Route info received:', this.routeInfo);\n        this.displayRouteInfo(this.routeInfo);\n      } catch (error) {\n        console.error('Error finding route:', error);\n        if (error.response) {\n          console.error('Error response data:', error.response.data);\n        }\n      }\n    },\n    displayRouteInfo(routeInfo) {\n      var results = document.getElementById('results');\n      results.innerHTML = `\n                <h2>경로 정보</h2>\n                <p>출발지: ${routeInfo.start}</p>\n                <p>도착지: ${routeInfo.end}</p>\n                <p>거리: ${routeInfo.distance}</p>\n                <p>시간: ${routeInfo.duration}</p>\n            `;\n    },\n    async initializeCsrfToken() {\n      const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n      const response = await axios.get(`${apiBaseUrl}/odsay/set-csrf-token/`, {\n        withCredentials: true\n      });\n      this.csrfToken = getCookie('csrftoken');\n      console.log('CSRF token set:', this.csrfToken);\n      console.log('Response from CSRF token endpoint:', response);\n    },\n    initializeMap() {\n      if (window.naver) {\n        var mapOptions = {\n          center: new naver.maps.LatLng(37.5665, 126.9780),\n          zoom: 10\n        };\n        this.map = new naver.maps.Map('map', mapOptions);\n      } else {\n        console.error('Naver Maps API is not loaded.');\n      }\n    }\n  },\n  async mounted() {\n    await this.initializeCsrfToken();\n    this.initializeMap();\n  }\n};","map":{"version":3,"names":["axios","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","props","memHome","String","startPoint","endPoint","memYoungY","Boolean","memYoungN","memSubsidiaryYn","data","localStartPoint","localEndPoint","routeInfo","start","end","distance","duration","map","csrfToken","methods","findRoute","apiBaseUrl","process","env","VUE_APP_API_BASE_URL","console","log","response","post","headers","displayRouteInfo","error","results","getElementById","innerHTML","initializeCsrfToken","get","withCredentials","initializeMap","window","naver","mapOptions","center","maps","LatLng","zoom","Map","mounted"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/MapView.js"],"sourcesContent":["import axios from 'axios';\n\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport default {\n    props: {\n        memHome: String,\n        startPoint: String,\n        endPoint: String,\n        memYoungY: Boolean,\n        memYoungN: Boolean,\n        memSubsidiaryYn: Boolean\n    },\n    data() {\n        return {\n            localStartPoint: this.startPoint,\n            localEndPoint: this.endPoint,\n            routeInfo: {\n                start: '',\n                end: '',\n                distance: '',\n                duration: ''\n            },\n            map: null,\n            csrfToken: getCookie('csrftoken')\n        };\n    },\n    methods: {\n        async findRoute() {\n            try {\n                const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n                console.log('Sending request to find route with data:', {\n                    startPoint: this.localStartPoint,\n                    endPoint: this.localEndPoint\n                });\n                const response = await axios.post(`${apiBaseUrl}/odsay/find-route/`, {\n                    startPoint: this.localStartPoint,\n                    endPoint: this.localEndPoint\n                }, {\n                    headers: {\n                        'X-CSRFToken': this.csrfToken\n                    }\n                });\n                this.routeInfo = response.data;\n                console.log('Route info received:', this.routeInfo);\n                this.displayRouteInfo(this.routeInfo);\n            } catch (error) {\n                console.error('Error finding route:', error);\n                if (error.response) {\n                    console.error('Error response data:', error.response.data);\n                }\n            }\n        },\n        displayRouteInfo(routeInfo) {\n            var results = document.getElementById('results');\n            results.innerHTML = `\n                <h2>경로 정보</h2>\n                <p>출발지: ${routeInfo.start}</p>\n                <p>도착지: ${routeInfo.end}</p>\n                <p>거리: ${routeInfo.distance}</p>\n                <p>시간: ${routeInfo.duration}</p>\n            `;\n        },\n        async initializeCsrfToken() {\n            const apiBaseUrl = process.env.VUE_APP_API_BASE_URL;\n            const response = await axios.get(`${apiBaseUrl}/odsay/set-csrf-token/`, { withCredentials: true });\n            this.csrfToken = getCookie('csrftoken');\n            console.log('CSRF token set:', this.csrfToken);\n            console.log('Response from CSRF token endpoint:', response);\n        },\n        initializeMap() {\n            if (window.naver) {\n                var mapOptions = {\n                    center: new naver.maps.LatLng(37.5665, 126.9780),\n                    zoom: 10\n                };\n                this.map = new naver.maps.Map('map', mapOptions);\n            } else {\n                console.error('Naver Maps API is not loaded.');\n            }\n        }\n    },\n    async mounted() {\n        await this.initializeCsrfToken();\n        this.initializeMap();\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
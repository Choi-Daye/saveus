{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-078caa85\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chatbot\"\n};\nconst _hoisted_2 = {\n  class: \"chat-window\"\n};\nconst _hoisted_3 = {\n  class: \"message-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" 채팅 메시지가 여기에 나타납니다 \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"chat-message\"\n    }, [_createElementVNode(\"div\", {\n      class: _normalizeClass(['message', message.sender])\n    }, _toDisplayString(message.text), 3 /* TEXT, CLASS */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.userInput = $event),\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"질문을 입력하세요\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendMessage && $options.sendMessage(...args))\n  }, \"전송\")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createCommentVNode","_Fragment","_renderList","$data","messages","message","index","key","_normalizeClass","sender","text","_hoisted_3","_cache","$event","userInput","onKeyup","_withKeys","args","$options","sendMessage","placeholder","onClick"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/views/ChatBot.vue"],"sourcesContent":["<template>\n    <div class=\"chatbot\">\n        <div class=\"chat-window\">\n            <!-- 채팅 메시지가 여기에 나타납니다 -->\n            <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-message\">\n            <div :class=\"['message', message.sender]\">{{ message.text }}</div>\n            </div>\n        </div>\n        <div class=\"message-input\">\n            <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"질문을 입력하세요\" />\n            <button @click=\"sendMessage\">전송</button>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'ChatBot',\n    inject: ['selectedPayment'], // 추가된 부분\n    data() {\n        return {\n            messages: [],\n            userInput: ''\n        };\n    },\n    methods: {\n        sendMessage() {\n            if (this.userInput.trim() !== '') {\n            this.messages.push({ sender: 'user', text: this.userInput });\n            const userMessage = this.userInput;\n            this.userInput = '';\n            this.getBotResponse(userMessage);\n            }\n        },\n        async getBotResponse(message) {\n            let botResponse = '';\n            const payment = this.selectedPayment;\n            console.log(\"Selected payment in ChatBot:\", payment); // 콘솔에 출력\n            if (payment && message.toLowerCase().includes('경로')) {\n            const { minValue, maxValue } = await this.calculateCost(payment);\n            botResponse = `현재 선택한 경로의 값은 ${payment}이며, 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${minValue}, 최대 ${maxValue} 값을 지불하게 됩니다.`;\n            } else if (message.toLowerCase().includes('안녕하세요')) {\n            botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n            } else if (message.toLowerCase().includes('도움')) {\n            botResponse = '물론이죠, 무엇을 도와드릴까요?';\n            } else {\n            botResponse = '이것은 봇의 응답입니다.';\n            }\n            this.messages.push({ sender: 'bot', text: botResponse });\n            this.scrollToEnd();\n        },\n        scrollToEnd() {\n            const chatWindow = this.$el.querySelector('.chat-window');\n            if (chatWindow) {\n            chatWindow.scrollTop = chatWindow.scrollHeight;\n            }\n        },\n        async calculateCost(payment) {\n            try {\n            const response = await fetch(`/calculate/calculate-cost/?payment=${payment}`);\n            const data = await response.json();\n            return data;\n            } catch (error) {\n            console.error('Error calculating cost:', error);\n            return { minValue: 0, maxValue: 0 };\n            }\n        }\n    }\n};\n</script>\n\n<style scoped src=\"../assets/css/ChatBot.css\"></style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAS;;EACXA,KAAK,EAAC;AAAa;;EAMnBA,KAAK,EAAC;AAAe;;uBAP9BC,mBAAA,CAWM,OAXNC,UAWM,GAVFC,mBAAA,CAKM,OALNC,UAKM,GAJFC,mBAAA,uBAA0B,G,kBAC1BJ,mBAAA,CAEMK,SAAA,QANlBC,WAAA,CAI4CC,KAAA,CAAAC,QAAQ,EAJpD,CAIyBC,OAAO,EAAEC,KAAK;yBAA3BV,mBAAA,CAEM;MAFqCW,GAAG,EAAED,KAAK;MAAEX,KAAK,EAAC;QAC7DG,mBAAA,CAAkE;MAA5DH,KAAK,EALvBa,eAAA,aAKqCH,OAAO,CAACI,MAAM;wBAAMJ,OAAO,CAACK,IAAI,wB;oCAG7DZ,mBAAA,CAGM,OAHNa,UAGM,G,gBAFFb,mBAAA,CAAgF;IAT5F,uBAAAc,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAS4BV,KAAA,CAAAW,SAAS,GAAAD,MAAA;IAAGE,OAAK,EAAAH,MAAA,QAAAA,MAAA,MAT7CI,SAAA,KAAAC,IAAA,KASqDC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAEG,WAAW,EAAC;iEAAlDjB,KAAA,CAAAW,SAAS,E,GACzBhB,mBAAA,CAAwC;IAA/BuB,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;KAAE,IAAE,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
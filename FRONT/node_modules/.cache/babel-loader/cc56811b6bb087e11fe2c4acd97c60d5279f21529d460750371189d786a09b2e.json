{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatBot',\n  data() {\n    return {\n      messages: [],\n      userInput: '',\n      payment: null\n    };\n  },\n  methods: {\n    sendMessage() {\n      if (this.userInput.trim() !== '') {\n        this.messages.push({\n          sender: 'user',\n          text: this.userInput\n        });\n        const userMessage = this.userInput;\n        this.userInput = '';\n        this.getBotResponse(userMessage);\n      }\n    },\n    async getBotResponse(message) {\n      let botResponse = '';\n      if (this.payment && message.toLowerCase().includes('경로')) {\n        const {\n          minValue,\n          maxValue\n        } = await this.calculateCost(this.payment);\n        botResponse = `현재 선택한 경로의 값은 ${this.payment}이며, 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${minValue}, 최대 ${maxValue} 값을 지불하게 됩니다.`;\n      } else if (message.toLowerCase().includes('안녕하세요')) {\n        botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n      } else if (message.toLowerCase().includes('도움')) {\n        botResponse = '물론이죠, 무엇을 도와드릴까요?';\n      } else {\n        botResponse = '이것은 봇의 응답입니다.';\n      }\n      this.messages.push({\n        sender: 'bot',\n        text: botResponse\n      });\n      this.scrollToEnd();\n    },\n    scrollToEnd() {\n      const chatWindow = this.$el.querySelector('.chat-window');\n      chatWindow.scrollTop = chatWindow.scrollHeight;\n    },\n    async calculateCost(payment) {\n      try {\n        const response = await fetch(`/calculate/calculate-cost/?payment=${payment}`);\n        const data = await response.json();\n        return data;\n      } catch (error) {\n        console.error('Error calculating cost:', error);\n        return {\n          minValue: 0,\n          maxValue: 0\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","messages","userInput","payment","methods","sendMessage","trim","push","sender","text","userMessage","getBotResponse","message","botResponse","toLowerCase","includes","minValue","maxValue","calculateCost","scrollToEnd","chatWindow","$el","querySelector","scrollTop","scrollHeight","response","fetch","json","error","console"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/ChatBot.js"],"sourcesContent":["export default {\n    name: 'ChatBot',\n    data() {\n        return {\n            messages: [],\n            userInput: '',\n            payment: null\n        };\n        },\n        methods: {\n        sendMessage() {\n            if (this.userInput.trim() !== '') {\n            this.messages.push({ sender: 'user', text: this.userInput });\n            const userMessage = this.userInput;\n            this.userInput = '';\n            this.getBotResponse(userMessage);\n            }\n        },\n        async getBotResponse(message) {\n            let botResponse = '';\n            if (this.payment && message.toLowerCase().includes('경로')) {\n            const { minValue, maxValue } = await this.calculateCost(this.payment);\n            botResponse = `현재 선택한 경로의 값은 ${this.payment}이며, 해당 경로로 한 달 동안 이용한다고 했을 때, 최소 ${minValue}, 최대 ${maxValue} 값을 지불하게 됩니다.`;\n            } else if (message.toLowerCase().includes('안녕하세요')) {\n            botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n            } else if (message.toLowerCase().includes('도움')) {\n            botResponse = '물론이죠, 무엇을 도와드릴까요?';\n            } else {\n            botResponse = '이것은 봇의 응답입니다.';\n            }\n            this.messages.push({ sender: 'bot', text: botResponse });\n            this.scrollToEnd();\n        },\n        scrollToEnd() {\n            const chatWindow = this.$el.querySelector('.chat-window');\n            chatWindow.scrollTop = chatWindow.scrollHeight;\n        },\n        async calculateCost(payment) {\n            try {\n            const response = await fetch(`/calculate/calculate-cost/?payment=${payment}`);\n            const data = await response.json();\n            return data;\n            } catch (error) {\n            console.error('Error calculating cost:', error);\n            return { minValue: 0, maxValue: 0 };\n            }\n        }\n    }\n};"],"mappings":";AAAA,eAAe;EACXA,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE;IACb,CAAC;EACD,CAAC;EACDC,OAAO,EAAE;IACTC,WAAWA,CAAA,EAAG;MACV,IAAI,IAAI,CAACH,SAAS,CAACI,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAClC,IAAI,CAACL,QAAQ,CAACM,IAAI,CAAC;UAAEC,MAAM,EAAE,MAAM;UAAEC,IAAI,EAAE,IAAI,CAACP;QAAU,CAAC,CAAC;QAC5D,MAAMQ,WAAW,GAAG,IAAI,CAACR,SAAS;QAClC,IAAI,CAACA,SAAS,GAAG,EAAE;QACnB,IAAI,CAACS,cAAc,CAACD,WAAW,CAAC;MAChC;IACJ,CAAC;IACD,MAAMC,cAAcA,CAACC,OAAO,EAAE;MAC1B,IAAIC,WAAW,GAAG,EAAE;MACpB,IAAI,IAAI,CAACV,OAAO,IAAIS,OAAO,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QAC1D,MAAM;UAAEC,QAAQ;UAAEC;QAAS,CAAC,GAAG,MAAM,IAAI,CAACC,aAAa,CAAC,IAAI,CAACf,OAAO,CAAC;QACrEU,WAAW,GAAG,iBAAiB,IAAI,CAACV,OAAO,oCAAoCa,QAAQ,QAAQC,QAAQ,eAAe;MACtH,CAAC,MAAM,IAAIL,OAAO,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACpDF,WAAW,GAAG,oBAAoB;MAClC,CAAC,MAAM,IAAID,OAAO,CAACE,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACjDF,WAAW,GAAG,mBAAmB;MACjC,CAAC,MAAM;QACPA,WAAW,GAAG,eAAe;MAC7B;MACA,IAAI,CAACZ,QAAQ,CAACM,IAAI,CAAC;QAAEC,MAAM,EAAE,KAAK;QAAEC,IAAI,EAAEI;MAAY,CAAC,CAAC;MACxD,IAAI,CAACM,WAAW,CAAC,CAAC;IACtB,CAAC;IACDA,WAAWA,CAAA,EAAG;MACV,MAAMC,UAAU,GAAG,IAAI,CAACC,GAAG,CAACC,aAAa,CAAC,cAAc,CAAC;MACzDF,UAAU,CAACG,SAAS,GAAGH,UAAU,CAACI,YAAY;IAClD,CAAC;IACD,MAAMN,aAAaA,CAACf,OAAO,EAAE;MACzB,IAAI;QACJ,MAAMsB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCvB,OAAO,EAAE,CAAC;QAC7E,MAAMH,IAAI,GAAG,MAAMyB,QAAQ,CAACE,IAAI,CAAC,CAAC;QAClC,OAAO3B,IAAI;MACX,CAAC,CAAC,OAAO4B,KAAK,EAAE;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,OAAO;UAAEZ,QAAQ,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAE,CAAC;MACnC;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport function handleSignup(alertComponent) {\n  // 비밀번호와 비밀번호 확인 일치 여부 확인\n  if (this.signupData.password !== this.signupData.confirmPassword) {\n    alertComponent.showAlert('비밀번호가 일치하지 않습니다.');\n    return;\n  }\n\n  // 회원가입 로직 구현 (예: 서버에 회원가입 요청 보내기)\n  console.log('회원가입 시도 중...', this.signupData);\n\n  // signupData를 URL 쿼리 문자열로 변환\n  const queryParams = new URLSearchParams(this.signupData).toString();\n  axios.get(`https://d5bf569728f0.ngrok.app/api/signup/?${queryParams}`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  }).then(response => {\n    console.log('회원가입 성공:', response.data);\n    const routeQueryParams = this.$route.query;\n    alertComponent.showAlert('회원가입 성공하였습니다.', () => {\n      // 회원가입 성공 후 CardRecom 페이지로 이동\n      this.$router.push({\n        name: 'CardRecom',\n        query: routeQueryParams\n      });\n    });\n  }).catch(error => {\n    console.error('회원가입 에러:', error);\n    const routeQueryParams = this.$route.query;\n    alertComponent.showAlert('회원가입 에러가 발생했습니다.', () => {\n      // 회원가입 에러 발생 후에도 CardRecom 페이지로 이동\n      this.$router.push({\n        name: 'CardRecom',\n        query: routeQueryParams\n      });\n    });\n  });\n}\nexport function redirectToLogin() {\n  // 로그인 페이지로 리다이렉트\n  console.log('로그인 페이지로 이동');\n  // 실제 구현에서는 라우터를 사용하여 페이지 이동\n  this.$router.push('/login');\n}","map":{"version":3,"names":["axios","handleSignup","alertComponent","signupData","password","confirmPassword","showAlert","console","log","queryParams","URLSearchParams","toString","get","headers","withCredentials","then","response","data","routeQueryParams","$route","query","$router","push","name","catch","error","redirectToLogin"],"sources":["/Users/parkjiyoung/saveus/FRONT/src/assets/js/Signup.js"],"sourcesContent":["import axios from 'axios';\n\nexport function handleSignup(alertComponent) {\n    // 비밀번호와 비밀번호 확인 일치 여부 확인\n    if (this.signupData.password !== this.signupData.confirmPassword) {\n        alertComponent.showAlert('비밀번호가 일치하지 않습니다.');\n        return;\n    }\n\n    // 회원가입 로직 구현 (예: 서버에 회원가입 요청 보내기)\n    console.log('회원가입 시도 중...', this.signupData);\n\n    // signupData를 URL 쿼리 문자열로 변환\n    const queryParams = new URLSearchParams(this.signupData).toString();\n\n    axios.get(`https://d5bf569728f0.ngrok.app/api/signup/?${queryParams}`, {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        withCredentials: true\n    })\n    .then(response => {\n        console.log('회원가입 성공:', response.data);\n        const routeQueryParams = this.$route.query;\n        alertComponent.showAlert('회원가입 성공하였습니다.', () => {\n            // 회원가입 성공 후 CardRecom 페이지로 이동\n            this.$router.push({\n                name: 'CardRecom',\n                query: routeQueryParams\n            });\n        });\n    })\n    .catch(error => {\n        console.error('회원가입 에러:', error);\n        const routeQueryParams = this.$route.query;\n        alertComponent.showAlert('회원가입 에러가 발생했습니다.', () => {\n            // 회원가입 에러 발생 후에도 CardRecom 페이지로 이동\n            this.$router.push({\n                name: 'CardRecom',\n                query: routeQueryParams\n            });\n        });\n    });\n}\n\nexport function redirectToLogin() {\n    // 로그인 페이지로 리다이렉트\n    console.log('로그인 페이지로 이동');\n    // 실제 구현에서는 라우터를 사용하여 페이지 이동\n    this.$router.push('/login');\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,YAAYA,CAACC,cAAc,EAAE;EACzC;EACA,IAAI,IAAI,CAACC,UAAU,CAACC,QAAQ,KAAK,IAAI,CAACD,UAAU,CAACE,eAAe,EAAE;IAC9DH,cAAc,CAACI,SAAS,CAAC,kBAAkB,CAAC;IAC5C;EACJ;;EAEA;EACAC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,IAAI,CAACL,UAAU,CAAC;;EAE5C;EACA,MAAMM,WAAW,GAAG,IAAIC,eAAe,CAAC,IAAI,CAACP,UAAU,CAAC,CAACQ,QAAQ,CAAC,CAAC;EAEnEX,KAAK,CAACY,GAAG,CAAC,8CAA8CH,WAAW,EAAE,EAAE;IACnEI,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,eAAe,EAAE;EACrB,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;IACdT,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEQ,QAAQ,CAACC,IAAI,CAAC;IACtC,MAAMC,gBAAgB,GAAG,IAAI,CAACC,MAAM,CAACC,KAAK;IAC1ClB,cAAc,CAACI,SAAS,CAAC,eAAe,EAAE,MAAM;MAC5C;MACA,IAAI,CAACe,OAAO,CAACC,IAAI,CAAC;QACdC,IAAI,EAAE,WAAW;QACjBH,KAAK,EAAEF;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;IACZlB,OAAO,CAACkB,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAChC,MAAMP,gBAAgB,GAAG,IAAI,CAACC,MAAM,CAACC,KAAK;IAC1ClB,cAAc,CAACI,SAAS,CAAC,kBAAkB,EAAE,MAAM;MAC/C;MACA,IAAI,CAACe,OAAO,CAACC,IAAI,CAAC;QACdC,IAAI,EAAE,WAAW;QACjBH,KAAK,EAAEF;MACX,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEA,OAAO,SAASQ,eAAeA,CAAA,EAAG;EAC9B;EACAnB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC1B;EACA,IAAI,CAACa,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
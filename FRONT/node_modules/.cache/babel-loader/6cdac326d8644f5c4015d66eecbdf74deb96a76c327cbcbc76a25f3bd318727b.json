{"ast":null,"code":"import axios from 'axios';\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n  try {\n    const response = await axios.get('https://d5bf569728f0.ngrok.app/odsay/set-csrf-token/', {\n      withCredentials: true\n    });\n    console.log('MapView.js >> CSRF token received:', response.data);\n    return response.data.csrfToken;\n  } catch (error) {\n    console.error('MapView.js >> Error fetching CSRF token:', error);\n    throw error; // 에러 발생 시 throw로 전달\n  }\n};\n\n// ODSAY API 키\nconst ODSAY_API_KEY = process.env.VUE_APP_ODSAY_API_KEY;\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n  baseURL: 'https://d5bf569728f0.ngrok.app',\n  // ngrok 도메인 설정\n  withCredentials: true // 자격 증명 포함\n});\naxiosInstance.interceptors.request.use(async config => {\n  try {\n    const token = await getCsrfToken();\n    config.headers['X-CSRFToken'] = token;\n    console.log('MapView.js >> CSRF token set in request headers:', token);\n    return config;\n  } catch (error) {\n    console.error('MapView.js >> Failed to set CSRF token in request headers:', error);\n    return Promise.reject(error); // 에러 발생 시 요청 중단\n  }\n});\nexport default {\n  props: {\n    memHome: String,\n    startPoint: String,\n    endPoint: String,\n    memYoungY: Boolean,\n    memYoungN: Boolean,\n    memSubsidiaryYn: Boolean\n  },\n  data() {\n    return {\n      localStartPoint: this.startPoint,\n      localEndPoint: this.endPoint,\n      routes: []\n    };\n  },\n  methods: {\n    async geocode(address) {\n      try {\n        console.log('MapView.js >> Geocoding address:', address);\n        const response = await axiosInstance.get('/odsay/geocode/', {\n          params: {\n            address\n          }\n        });\n        console.log('MapView.js >> Geocode response:', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('MapView.js >> Error geocoding address:', error);\n        if (error.response) {\n          console.error('MapView.js >> Error response data:', error.response.data);\n        }\n        throw error;\n      }\n    },\n    async findRoute() {\n      try {\n        console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n\n        // Geocoding 주소를 통해 좌표를 가져오는 부분 (백엔드에서 처리)\n        const startResponse = await this.geocode(this.localStartPoint); // GET 메서드를 사용하도록 수정\n        console.log('MapView.js >> Start geocode response:', startResponse);\n        const endResponse = await this.geocode(this.localEndPoint); // GET 메서드를 사용하도록 수정\n        console.log('MapView.js >> End geocode response:', endResponse);\n        if (!startResponse || !endResponse) {\n          throw new Error('Failed to get coordinates');\n        }\n        const {\n          x: sx,\n          y: sy\n        } = startResponse.data;\n        const {\n          x: ex,\n          y: ey\n        } = endResponse.data;\n        console.log('MapView.js >> Start coordinates:', {\n          sx,\n          sy\n        });\n        console.log('MapView.js >> End coordinates:', {\n          ex,\n          ey\n        });\n\n        // ODSAY API를 통해 경로 찾기 요청\n        const odsasApiUrl = `https://api.odsay.com/v1/api/searchPubTransPathT?SX=${sx}&SY=${sy}&EX=${ex}&EY=${ey}&apiKey=${encodeURIComponent(ODSAY_API_KEY)}`;\n        console.log('MapView.js >> ODSAY API request URL:', odsasApiUrl); // 요청 URL을 로그에 출력\n\n        const routeResponse = await axios.get(odsasApiUrl);\n        console.log('MapView.js >> ODSAY API response:', routeResponse.data);\n        if (routeResponse.data && routeResponse.data.result && routeResponse.data.result.path) {\n          this.routes = routeResponse.data.result.path;\n        } else {\n          console.error('MapView.js >> Unexpected API response format:', routeResponse.data);\n          this.routes = []; // 데이터가 없을 경우 빈 배열로 초기화합니다.\n        }\n      } catch (error) {\n        console.error('MapView.js >> Error finding route:', error);\n        if (error.response) {\n          console.error('MapView.js >> Error response data:', error.response.data);\n        }\n      }\n    },\n    formatTime(minutes) {\n      const hours = Math.floor(minutes / 60);\n      const mins = minutes % 60;\n      return `${hours}시간 ${mins}분`;\n    },\n    getLineClass(trafficType, subwaycode) {\n      if (trafficType === 1) {\n        return 'bus';\n      } else if (trafficType === 2) {\n        return `sub${subwaycode}`;\n      } else {\n        return 'walk';\n      }\n    },\n    getAction(subPath) {\n      if (subPath.trafficType === 1) {\n        return '승차';\n      } else if (subPath.trafficType === 2) {\n        return '환승';\n      } else {\n        return '도보';\n      }\n    },\n    initializeMap() {\n      if (window.naver) {\n        var mapOptions = {\n          center: new naver.maps.LatLng(37.5665, 126.9780),\n          zoom: 10\n        };\n        this.map = new naver.maps.Map('map', mapOptions);\n      } else {\n        console.error('MapView.js >> Naver Maps API is not loaded.');\n      }\n    }\n  },\n  async mounted() {\n    this.initializeMap();\n  }\n};","map":{"version":3,"names":["axios","getCsrfToken","response","get","withCredentials","console","log","data","csrfToken","error","ODSAY_API_KEY","process","env","VUE_APP_ODSAY_API_KEY","axiosInstance","create","baseURL","interceptors","request","use","config","token","headers","Promise","reject","props","memHome","String","startPoint","endPoint","memYoungY","Boolean","memYoungN","memSubsidiaryYn","localStartPoint","localEndPoint","routes","methods","geocode","address","params","findRoute","startResponse","endResponse","Error","x","sx","y","sy","ex","ey","odsasApiUrl","encodeURIComponent","routeResponse","result","path","formatTime","minutes","hours","Math","floor","mins","getLineClass","trafficType","subwaycode","getAction","subPath","initializeMap","window","naver","mapOptions","center","maps","LatLng","zoom","map","Map","mounted"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/assets/js/MapView.js"],"sourcesContent":["import axios from 'axios';\n\n// CSRF 토큰을 가져와 Axios 인스턴스에 추가\nconst getCsrfToken = async () => {\n    try {\n        const response = await axios.get('https://d5bf569728f0.ngrok.app/odsay/set-csrf-token/', { withCredentials: true });\n        console.log('MapView.js >> CSRF token received:', response.data);\n        return response.data.csrfToken;\n    } catch (error) {\n        console.error('MapView.js >> Error fetching CSRF token:', error);\n        throw error;  // 에러 발생 시 throw로 전달\n    }\n};\n\n// ODSAY API 키\nconst ODSAY_API_KEY = process.env.VUE_APP_ODSAY_API_KEY;\n\n// Axios 인스턴스 생성 및 기본 설정 추가\nconst axiosInstance = axios.create({\n    baseURL: 'https://d5bf569728f0.ngrok.app',  // ngrok 도메인 설정\n    withCredentials: true  // 자격 증명 포함\n});\n\naxiosInstance.interceptors.request.use(async (config) => {\n    try {\n        const token = await getCsrfToken();\n        config.headers['X-CSRFToken'] = token;\n        console.log('MapView.js >> CSRF token set in request headers:', token);\n        return config;\n    } catch (error) {\n        console.error('MapView.js >> Failed to set CSRF token in request headers:', error);\n        return Promise.reject(error);  // 에러 발생 시 요청 중단\n    }\n});\n\n\nexport default {\n    props: {\n        memHome: String,\n        startPoint: String,\n        endPoint: String,\n        memYoungY: Boolean,\n        memYoungN: Boolean,\n        memSubsidiaryYn: Boolean\n    },\n    data() {\n        return {\n            localStartPoint: this.startPoint,\n            localEndPoint: this.endPoint,\n            routes: []\n        };\n    },\n    methods: {\n        async geocode(address) {\n            try {\n                console.log('MapView.js >> Geocoding address:', address);\n                const response = await axiosInstance.get('/odsay/geocode/', { params: { address } });\n                console.log('MapView.js >> Geocode response:', response.data);\n                return response.data;\n            } catch (error) {\n                console.error('MapView.js >> Error geocoding address:', error);\n                if (error.response) {\n                    console.error('MapView.js >> Error response data:', error.response.data);\n                }\n                throw error;\n            }\n        },\n        async findRoute() {\n            try {\n                console.log('MapView.js >> Finding route with start point:', this.localStartPoint, 'and end point:', this.localEndPoint);\n                \n                 // Geocoding 주소를 통해 좌표를 가져오는 부분 (백엔드에서 처리)\n                const startResponse = await this.geocode(this.localStartPoint);  // GET 메서드를 사용하도록 수정\n                console.log('MapView.js >> Start geocode response:', startResponse);\n                const endResponse = await this.geocode(this.localEndPoint);  // GET 메서드를 사용하도록 수정\n                console.log('MapView.js >> End geocode response:', endResponse);\n                \n                if (!startResponse || !endResponse) {\n                    throw new Error('Failed to get coordinates');\n                }\n\n                const { x: sx, y: sy } = startResponse.data;\n                const { x: ex, y: ey } = endResponse.data;\n                \n                console.log('MapView.js >> Start coordinates:', { sx, sy });\n                console.log('MapView.js >> End coordinates:', { ex, ey });\n                \n                // ODSAY API를 통해 경로 찾기 요청\n                const odsasApiUrl = `https://api.odsay.com/v1/api/searchPubTransPathT?SX=${sx}&SY=${sy}&EX=${ex}&EY=${ey}&apiKey=${encodeURIComponent(ODSAY_API_KEY)}`;\n                console.log('MapView.js >> ODSAY API request URL:', odsasApiUrl); // 요청 URL을 로그에 출력\n                \n                const routeResponse = await axios.get(odsasApiUrl);\n                console.log('MapView.js >> ODSAY API response:', routeResponse.data);\n\n                if (routeResponse.data && routeResponse.data.result && routeResponse.data.result.path) {\n                    this.routes = routeResponse.data.result.path;\n                } else {\n                    console.error('MapView.js >> Unexpected API response format:', routeResponse.data);\n                    this.routes = []; // 데이터가 없을 경우 빈 배열로 초기화합니다.\n                }\n            } catch (error) {\n                console.error('MapView.js >> Error finding route:', error);\n                if (error.response) {\n                    console.error('MapView.js >> Error response data:', error.response.data);\n                }\n            }\n        },\n        formatTime(minutes) {\n            const hours = Math.floor(minutes / 60);\n            const mins = minutes % 60;\n            return `${hours}시간 ${mins}분`;\n        },\n        getLineClass(trafficType, subwaycode) {\n            if (trafficType === 1) {\n                return 'bus';\n            } else if (trafficType === 2) {\n                return `sub${subwaycode}`;\n            } else {\n                return 'walk';\n            }\n        },\n        getAction(subPath) {\n            if (subPath.trafficType === 1) {\n                return '승차';\n            } else if (subPath.trafficType === 2) {\n                return '환승';\n            } else {\n                return '도보';\n            }\n        },\n        initializeMap() {\n            if (window.naver) {\n                var mapOptions = {\n                    center: new naver.maps.LatLng(37.5665, 126.9780),\n                    zoom: 10\n                };\n                this.map = new naver.maps.Map('map', mapOptions);\n            } else {\n                console.error('MapView.js >> Naver Maps API is not loaded.');\n            }\n        }\n    },\n    async mounted() {\n        this.initializeMap();\n    },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
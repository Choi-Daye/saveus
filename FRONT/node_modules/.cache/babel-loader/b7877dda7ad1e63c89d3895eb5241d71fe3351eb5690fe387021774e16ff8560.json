{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'ChatBot',\n  props: ['selectedPayment'],\n  // selectedPayment를 props로 받기\n  data() {\n    return {\n      messages: [],\n      userInput: ''\n    };\n  },\n  watch: {\n    async selectedPayment(newPayment) {\n      console.log(\"Selected payment in ChatBot:\", newPayment); // 콘솔에 출력\n      if (newPayment) {\n        await this.handleRouteClickPayment(newPayment);\n      }\n    }\n  },\n  methods: {\n    sendMessage() {\n      if (this.userInput.trim() !== '') {\n        this.messages.push({\n          sender: 'user',\n          text: this.userInput\n        });\n        const userMessage = this.userInput;\n        this.userInput = '';\n        this.getBotResponse(userMessage);\n      }\n    },\n    async getBotResponse(message) {\n      let botResponse = '';\n      console.log(\"User message:\", message); // 추가\n      if (message.toLowerCase().includes('안녕하세요')) {\n        botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n      } else if (message.toLowerCase().includes('도움')) {\n        botResponse = '물론이죠, 무엇을 도와드릴까요?';\n      } else {\n        botResponse = '이것은 봇의 응답입니다.';\n      }\n      this.messages.push({\n        sender: 'bot',\n        text: botResponse\n      });\n      this.scrollToEnd();\n    },\n    scrollToEnd() {\n      const chatWindow = this.$el.querySelector('.chat-window');\n      if (chatWindow) {\n        chatWindow.scrollTop = chatWindow.scrollHeight;\n      }\n    },\n    formatNumber(value) {\n      return value.toLocaleString();\n    },\n    async calculateCost(payment) {\n      console.log(`Sending request to calculate cost with payment: ${payment}`); // 콘솔에 출력\n      try {\n        const response = await fetch(`https://d5bf569728f0.ngrok.app/calculate/calculate-cost/?payment=${payment}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log('Response data:', data); // 응답 데이터 콘솔에 출력\n        return data;\n      } catch (error) {\n        console.error('Error calculating cost:', error);\n        return {\n          minValue: 0,\n          maxValue: 0\n        };\n      }\n    },\n    async handleRouteClickPayment(payment) {\n      console.log(\"Handling route click payment in ChatBot:\", payment); // 콘솔에 출력\n      if (payment) {\n        try {\n          console.log(\"Calling calculateCost...\"); // 추가\n          const {\n            minValue,\n            maxValue\n          } = await this.calculateCost(payment);\n          console.log(`Calculated cost: min=${minValue}, max=${maxValue}`); // 추가\n          const botResponse = `현재 선택한 경로의 편도 교통비는 ${this.formatNumber(payment)}원 입니다. \\n<해당 경로로 한 달 동안 이용한다고 했을 때 예상 비용>\\n ↟ 최소 ${this.formatNumber(minValue)}원\\n ↡ 최대 ${this.formatNumber(maxValue)}원`;\n          this.messages.push({\n            sender: 'bot',\n            text: botResponse\n          });\n          this.scrollToEnd();\n        } catch (error) {\n          console.error(\"Error in handleRouteClickPayment:\", error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","data","messages","userInput","watch","selectedPayment","newPayment","console","log","handleRouteClickPayment","methods","sendMessage","trim","push","sender","text","userMessage","getBotResponse","message","botResponse","toLowerCase","includes","scrollToEnd","chatWindow","$el","querySelector","scrollTop","scrollHeight","formatNumber","value","toLocaleString","calculateCost","payment","response","fetch","ok","Error","status","json","error","minValue","maxValue"],"sources":["/Users/parkjiyoung/Desktop/computer/smart_injae/hackshim_project/saveus_proto/saveus/frontend/src/views/ChatBot.vue"],"sourcesContent":["<template>\n    <div class=\"chatbot\">\n        <div class=\"chat-window\">\n            <!-- 채팅 메시지가 여기에 나타납니다 -->\n            <div v-for=\"(message, index) in messages\" :key=\"index\" class=\"chat-message\">\n                <div :class=\"['message', message.sender]\">{{ message.text }}</div>\n            </div>\n        </div>\n        <div class=\"message-input\">\n            <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"질문을 입력하세요\" />\n            <button @click=\"sendMessage\">전송</button>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'ChatBot',\n    props: ['selectedPayment'], // selectedPayment를 props로 받기\n    data() {\n        return {\n            messages: [],\n            userInput: ''\n        };\n    },\n    watch: {\n        async selectedPayment(newPayment) {\n            console.log(\"Selected payment in ChatBot:\", newPayment); // 콘솔에 출력\n            if (newPayment) {\n                await this.handleRouteClickPayment(newPayment);\n            }\n        }\n    },\n    methods: {\n        sendMessage() {\n            if (this.userInput.trim() !== '') {\n                this.messages.push({ sender: 'user', text: this.userInput });\n                const userMessage = this.userInput;\n                this.userInput = '';\n                this.getBotResponse(userMessage);\n            }\n        },\n        async getBotResponse(message) {\n            let botResponse = '';\n            console.log(\"User message:\", message); // 추가\n            if (message.toLowerCase().includes('안녕하세요')) {\n                botResponse = '안녕하세요! 무엇을 도와드릴까요?';\n            } else if (message.toLowerCase().includes('도움')) {\n                botResponse = '물론이죠, 무엇을 도와드릴까요?';\n            } else {\n                botResponse = '이것은 봇의 응답입니다.';\n            }\n            this.messages.push({ sender: 'bot', text: botResponse });\n            this.scrollToEnd();\n        },\n        scrollToEnd() {\n            const chatWindow = this.$el.querySelector('.chat-window');\n            if (chatWindow) {\n                chatWindow.scrollTop = chatWindow.scrollHeight;\n            }\n        },\n        formatNumber(value) {\n            return value.toLocaleString();\n        },\n        async calculateCost(payment) {\n            console.log(`Sending request to calculate cost with payment: ${payment}`); // 콘솔에 출력\n            try {\n                const response = await fetch(`https://d5bf569728f0.ngrok.app/calculate/calculate-cost/?payment=${payment}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                console.log('Response data:', data); // 응답 데이터 콘솔에 출력\n                return data;\n            } catch (error) {\n                console.error('Error calculating cost:', error);\n                return { minValue: 0, maxValue: 0 };\n            }\n        },\n        async handleRouteClickPayment(payment) {\n            console.log(\"Handling route click payment in ChatBot:\", payment); // 콘솔에 출력\n            if (payment) {\n                try {\n                    console.log(\"Calling calculateCost...\"); // 추가\n                    const { minValue, maxValue } = await this.calculateCost(payment);\n                    console.log(`Calculated cost: min=${minValue}, max=${maxValue}`); // 추가\n                    const botResponse = `현재 선택한 경로의 편도 교통비는 ${this.formatNumber(payment)}원 입니다. \\n<해당 경로로 한 달 동안 이용한다고 했을 때 예상 비용>\\n ↟ 최소 ${this.formatNumber(minValue)}원\\n ↡ 최대 ${this.formatNumber(maxValue)}원`;\n                    this.messages.push({ sender: 'bot', text: botResponse });\n                    this.scrollToEnd();\n                } catch (error) {\n                    console.error(\"Error in handleRouteClickPayment:\", error);\n                }\n            }\n        }\n    }\n};\n</script>\n\n<style scoped src=\"../assets/css/ChatBot.css\"></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}